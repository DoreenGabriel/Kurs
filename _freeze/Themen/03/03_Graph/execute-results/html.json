{
  "hash": "bd40c82fe7806fa0a1bf647b453a8a58",
  "result": {
    "markdown": "---\ntitle: \"Grafische Darstellungen\"\n---\n\n::: {.cell}\n\n:::\n\n\nBevor Daten statistisch analysiert werden, sollten sie grafisch dargestellt werden, um mögliche Fehler, Ausreißer oder Muster zu erkennen. Darüber hinaus ist die grafische Darstellung der Daten für die Präsentation und Interpretation statistischer Modelle unerlässlich.\nWir nutzen hierfür den Datensatz [potato.xlsx](https://github.com/DoreenGabriel/Kurs/blob/main/Themen/03/potato.xlsx){target=\"_blank\"}, wie schon in der vorherigen Kapiteln. \nIch füge zusätzlich für die als `character` eingelesenen Spalten, Variablen als Faktoren ein (`variety.f`, `method.f`, `infection.f`) und ändere für `variety.f2` die Reihenfolge der Faktorlevels, i.e. `Unica` ist nun das erste Level.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nlibrary(dplyr)\npot<-read.xlsx(\"potato.xlsx\", sheet=1)\npot=pot %>% \n    mutate(variety.f=as.factor(variety),\n           method.f=as.factor(method),\n           infection.f=as.factor(infection),\n           variety.f2=factor(variety, levels=c(\"Unica\" , \"Costanera\", \"Mariva\")))\nstr(pot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t478 obs. of  11 variables:\n $ variety    : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method     : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant      : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers     : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight     : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection  : num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity   : num  26.1 30.2 52.5 34 49.6 ...\n $ variety.f  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method.f   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ infection.f: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 1 1 1 ...\n $ variety.f2 : Factor w/ 3 levels \"Unica\",\"Costanera\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\n# ggplot\n\nDie folgenden Abbildungen werden mit der `library(ggplot2)` erstellt. Einen Schummelzettel zur `library(ggplot2)` findet ihr unter:\\\n[https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/german/data-visualization_de.pdf](https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/german/data-visualization_de.pdf){target=\"_blank\"}\nUnd ein ganzes Buch mit Erklärungen gibt es unter  [https://ggplot2-book.org/](https://ggplot2-book.org/){target=\"_blank\"}\n\nZunächst laden wir die `library(ggplot2)` ein.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nMit der Funktion `ggplot()` geben wir mit `data=pot` den `data.frame` an, in dem sich die Daten befinden und mit dem Argument `aes(x=weight, y=tubers)` die Variablen, die dargestellt werden sollen (aes steht für *aestetics*). Das Ergebnis ist eine Plotoberfläche. Wir können nun verschiedene Layer hinzufügen (z.B. einen Scatterplot) und so bestimmen, wie die Daten dargestellt werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Scatterplot `geom_point()`\n\n-   zwei kontinuierliche Variablen\n-   `ggplot(data=pot, aes(x=Erklärungsvariable, y=Zielgröße)) + geom_point()`\n\nMit der Funktion `+ geom_point()` wird ein Scatterplot erzeugt, nachdem in der vorangegangenen Funktion `ggplot()` im Argument `aes(x=, y=)` die Variablen der x- und y-Achse gewählt wurden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Achsenbeschriftung `labs()`\n\nMit der Funktion `+ labs(title=\" \", x=\" \", y=\" \")` werden in die \" \" die Beschriftungen eingefügt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Achsenlimitierung `coord_cartesian()`\n\nMit der Funktion `coord_cartesian(xlim=c(,), ylim=c(,))` ändert man das Minimum und Maximum der x- und y-Achse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## alle Layer über + verbinden\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen pro Pflanze\")+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Plotsymbol `shape`\n\nDurch das Argument `shape=` in der Funktion `geom_point()` können die Plotsymbole geändert werden. Folgende Symbole werden durch die Zahlen 0 bis 24 abgebildet.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=1)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Plotsymbol entsprechend variety\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, shape=variety)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Plotsymbole manuel festlegen\n\nMit `scale_shape_manual(values=c(1,2,3))` kann man manuell die Plotsymbole verändern, wobei die Werte 1, 2 und 3 dann für die 3 Sorten stehen. Hier kann man ganze Zahlen von 0 bis 24 wählen (siehe Abbildung zu den Plotsymbolen weiter oben). Wichtig ist nur, dass die Anzahl der Zahlen mit der Anzahl der unterschiedlichen Sorten übereinstimmt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, shape=variety)) +\n  geom_point()+\n  scale_shape_manual(values=c(1,2,3))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Größe des Plotsymbols `size`\n\n`size=3` je höher die Zahl, desto größer die Symbole\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=2, size=3)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Farbe des Plotsymbols `col`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-14-1.png){width=576}\n:::\n:::\n\n\nMit `col=3` werden die Symbole grün dargestellt. Farben kann man durch die Zahlen 1 bis 7 wählen oder benennen z.B. \"green\", \"darkgreen\", \"red\". Alle möglichen Farben findet ihr mit der Funktion `colors()`oder auf [http://www.stat.columbia.edu/\\~tzheng/files/Rcolor.pdf](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf){target=\"_blank\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\nshow_col(colors()[1:100], ncol=10)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-15-1.png){width=960}\n:::\n\n```{.r .cell-code}\nshow_col(colors()[152:253], ncol=10)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-15-2.png){width=960}\n:::\n\n```{.r .cell-code}\nshow_col(pal_hue()(49))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-15-3.png){width=960}\n:::\n\n```{.r .cell-code}\nshow_col(pal_viridis()(49))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-15-4.png){width=960}\n:::\n\n```{.r .cell-code}\nshow_col(topo.colors(49))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-15-5.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=20, size=3, col=\"#287C8EFF\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAuch RGB-Farben können gewählt werden. Hier ein Beispiel für das JKI blau:\n\n-   R: 35\n-   G: 80\n-   B: 150\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=20, size=3, col=rgb(35,80,150, max = 255))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Die Farbe des Plotsymbols ensprechend der Faktorausprägung `variety`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(\"royalblue\", \"orange\", \"olivedrab\"))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nDie Sorten entsprechend JKI-Farbwelt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(rgb(190,210,35, max = 255), \n                              rgb(35,80,150, max = 255), \n                              rgb(240,215,35, max = 255)))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nWenn keine Zuordnung der Werte zu den Farben erfolgt, dann werden die Farben entsprechend der Reihenfolge der Faktorlevels abgebildet (alphanumerisch).\n\nHier ein Beispiel mit Zuordnung.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(\"Mariva\"=rgb(190,210,35, max = 255), \n                              \"Unica\"=rgb(35,80,150, max = 255), \n                              \"Costanera\"=rgb(240,215,35, max = 255)))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## ein Plot für jede Sorte `facet_grid()` und `facet_wrap()`\n\nMit der Funktion `+ facet_grid(~ variety)` oder `+ facet_wrap(~ variety)` wird ein separater Plot für jedes Gruppierungslevel der `variety` erzeugt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_grid(~variety)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-22-1.png){width=624}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_wrap(~variety)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-22-2.png){width=624}\n:::\n:::\n\n\n## Ein Plot für jede Sorte und mit und ohne Befall (Infection)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_grid(infection~variety)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-23-1.png){width=624}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_wrap(infection~variety, labeller = labeller(.multi_line = FALSE))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-23-2.png){width=624}\n:::\n:::\n\n\n## Regressionslinien einzeichnen\n\nIm Folgenden sehen wir Beispiele für unterschiedliche Modellfits. Diese dienen nur der Veranschaulichung und ersetzen nicht die statistischen Analysen mit Modelldiagnostik.\n\n### LM fit (lineare Regression)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### LM fit ohne Konfidenzintervall\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Polynomial zweiten Grades y= x + x²\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, formula=y ~ poly(x, 2)) # formula=y ~ x+I(x^2)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### Polynomial dritten Grades y= x + x² + x³\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, formula=y ~ poly(x, 3)) # formula=y ~ x+I(x^2)+I(x^3)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### GLM fit\n\nWer sich über Generalsierte Lineare Modelle informieren möchte, kann im Intranet unter [http://intranet.julius-kuehn.de/forschungservice/biometrie](http://intranet.julius-kuehn.de/forschungservice/biometrie){target=\"_blank\"} das Skript **Generalisierte Lineare Modelle in R** finden.\n\n#### Zähldaten: Poisson\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=glm, method.args = list(family = \"poisson\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n#### Zähldaten: Quasipoisson\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=glm, method.args = list(family = \"quasipoisson\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n#### Zähldaten: Negativbinomial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=\"glm.nb\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n#### Streng positive kontinuierliche Daten: Gamma\n\n\n::: {.cell}\n\n```{.r .cell-code}\npot1=pot[pot$weight>0,]\nggplot(data=pot1, aes(x=tubers, y=weight)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = Gamma(link = log)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n#### presence/absence: binomial\n\nWir plotten die Beziehung zwischen Infektion und Luftfeuchtigkeit (`humidity`).\n\nBeispiele mit unterschiedlichen Links (logit, probit und cloglog)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#logit\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#probit\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial(link = probit)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-32-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#cloglog\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial(link = cloglog)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-32-3.png){width=672}\n:::\n:::\n\n\n### Modellfit für verschiedene Sorten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, colour=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nund hier ein Modelfit ohne Berücksichtigung der farblich unterschiedlichen Sorten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(aes(colour=variety))+\n  geom_smooth(method=lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, colour=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  facet_grid(~variety)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## mögliche Abbildung der Daten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  scale_color_manual(values=c(rgb(190,210,35, max = 255), \n                              rgb(35,80,150, max = 255), \n                              rgb(240,215,35, max = 255)))+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen\")+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))+\n  facet_grid(method~variety)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-36-1.png){width=576}\n:::\n:::\n\n\n\n# Übung 3.1.\n\n\n\nDie Körpergröße, Schuhgröße, Geschlecht und Augenfarbe von Kursteilnehmer wurde ermittelt. Importiere bitte die Daten [Kursteilnehmer.xlsx](https://github.com/DoreenGabriel/Kurs/blob/main/Themen/03/Kursteilnehmer.xlsx){target=\"_blank\"} in R und benenne den data.frame mit `md`. \n\n::: {.callout-tip collapse=\"true\"}\n### Daten einlesen und prüfen\nDer Datensatz hat in der ersten Zeile eine detaillierte und in der zweiter Zeile die kurze Variablenbezeichnung. Daher lese ich die Daten mit dem Argument `startRow = 2` erst ab der zweiten Zeile ein. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nmd<-read.xlsx(\"Kursteilnehmer.xlsx\", sheet=1, startRow = 2)\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t72 obs. of  5 variables:\n $ Name: chr  \"Colton\" \"Kyle\" \"Brandon\" \"Cory\" ...\n $ KG  : num  181 183 186 184 172 186 183 197 180 184 ...\n $ SG  : num  42 44 42 45 43 43 42 45 43 43 ...\n $ AF  : chr  \"braun\" \"braun\" \"braun\" \"blau\" ...\n $ G   : chr  \"m\" \"m\" \"m\" \"m\" ...\n```\n:::\n:::\n\n:::\n\n\nLerne folgende Funktionen kennen:\n\n-   `plot(md)`\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(md)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n:::\n\nPlotte:\n\n-   den Zusammenhang zwischen Körpergröße und Schuhgröße mit\n    -   unterschiedlichen Farben für die Frauen und Männer und \n    -   Regressionslinien\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data=md, aes(x=KG, y=SG, colour=G)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, colour=G)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-39-2.png){width=672}\n:::\n:::\n\n\n:::\n\nZusatzaufgaben:\n\n-   verwende statt geom_point() die Funktion geom_count()\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, colour=G)) +\n  geom_count()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n:::\n\n\n-   finde heraus, was mit dem Argument `scales` der Funktion `facet_wrap()` geändert werden kann\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, color=G))+\n  geom_count()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))+\n  facet_wrap(~G)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, color=G))+\n  geom_count()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))+\n  facet_wrap(~G, scales=\"free_y\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-41-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, color=G))+\n  geom_count()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))+\n  facet_wrap(~G, scales=\"free_x\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-41-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, color=G))+\n  geom_count()+\n  geom_smooth(method=lm)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))+\n  facet_wrap(~G, scales=\"free\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-41-4.png){width=672}\n:::\n:::\n\n\n:::\n\n-   plotte erst Frauen (links) und dann Männer (rechts) \n\n::: {.callout-tip collapse=\"true\"}\n\nHierfür erstelle ich eine neue Variable `G2` in `md`, die ein Faktor mit den levels w und m ist (statt der alphanumerischen Reihenfolge)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd$G2=factor(md$G)\nlevels(md$G2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"m\" \"w\"\n```\n:::\n\n```{.r .cell-code}\nmd$G2 <- factor(md$G , levels=c(\"w\", \"m\"))\nlevels(md$G2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"w\" \"m\"\n```\n:::\n\n```{.r .cell-code}\ntable(md$G, md$G2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n     w  m\n  m  0 32\n  w 40  0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=md, aes(x=KG, y=SG, color=G))+\n  geom_count()+geom_smooth(method=lm)+\n  facet_wrap(~G2)+\n  labs(x=\"Körpergröße in cm\", y=\"Schuhgröße\")+\n  scale_color_manual(values=c(\"darkblue\", \"red\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n:::\n  \n\n\nEnde Übung 3.1.\n\n------------------------------------------------------------------------\n\n# Boxplot\n\n-   Verteilung einer kontinuierlichen Variable (y) in Relation zu einer kategorialen Variable (x)\n-   `ggplot(md, aes(x=Erklärungsvariable, y=Zielgröße)) + geom_boxplot()`\\\n-   Abgebildet sind:\n    -   Median\n    -   unteres und oberes Quartil (1. und 3. Quartil = 25 % und 75 % Perzentil)\n    -   Whisker (min und max oder 1,5\\*Interquantilabstand)\n    -   Ausreißer (sind nicht *per se* Ausreißer, aber Punkte außerhalb des 1,5-fachen Interquantilabstandes)\n-   geeignet für n \\> 10 - 20 pro Kategorie (x)\n-   vorsichtige Interpretation für n \\> 4 - 10\n-   nicht geeignet bei 4 Beobachtungen oder weniger\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nWer gerne die Whisker mit einem Querstrich begrenzen möchte, nutzt zusätzlich `stat_boxplot()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n## jittered Boxplot\n\nBei einem jittered Boxplot werden die Messwerte zusätzlich über den Boxplot geplottet. Das gibt dem Betrachter ein umfangreicheres Verständnis über die Daten. Um eine überlappung der Daten zu verhindern, wird für jeden Messwert eine kleine Zufallszahl in x-Richtung (`width=0.25`) gezogen. Natürlich werden die Werte nicht in der y-Richtung verändert (`height=0`). Um mögliche Ausreißer nicht doppelt abzubilden, muss das Argument `outlier.shape=NA` in der Funktion `geom_boxplot()` gesetzt werden.\n\nPallmann & Hothorn 2015: *Boxplots for grouped and clustered data in toxicology. Archives of Toxicology.* DOI 10.1007/s00204-015-1608-4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n   stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## zusätzliche Stats\n\n### Mittelwert\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)+\n  stat_summary(fun = \"mean\", colour = \"red\", size = 2, geom = \"point\") # Mittelwert\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n### bootstrapped Konfidenzintervall\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)+\n  stat_summary(fun.data = \"mean_cl_boot\", colour = \"red\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n### Stichprobenumfang bzw. Anzahl Wiederholungen je Gruppe\n\n[https://stackoverflow.com/questions/42822273/adding-sample-size-to-a-box-plot-at-the-min-or-max-of-the-facet-in-ggplot](https://stackoverflow.com/questions/42822273/adding-sample-size-to-a-box-plot-at-the-min-or-max-of-the-facet-in-ggplot){target=\"_blank\"}  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngive.n<-function(x)\n  {\n  return(c(y = 300, label = length(x))) # y ggfls. anpassen \n  }\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+\n  stat_summary(fun = \"mean\", colour = \"red\", size = 2, geom = \"point\")+ # Mittelwert\n  stat_summary(fun.data = give.n, geom=\"text\", colour=\"gray10\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n## weight \\~ method und variety\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1)\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2) \nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-50-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3) \nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot() +\n  facet_grid(~variety)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n## x-Achsenlevels\nIn diesem Beispiel ist die Beschriftung der x-Achsenlevels sehr lang. Mit `\\n` können wir einen Zeilenumbruch erzeugen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot() +\n  facet_grid(~variety)+\n  scale_x_discrete(labels =c(\"aero-\\nponic\", \"bed\", \"hydro-\\nponic\", \"pot\"))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\noder wir drehen die X-Achsenbeschriftungslevels um 45 Grad. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot() +\n  facet_grid(~variety)+\n  scale_x_discrete(labels =c(\"aeronponic\", \"bed\", \"hydronponic\", \"pot\"))+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n## jittered boxplot für weight \\~ method und variety\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(shape=1, size=1)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\nNoch nicht ganz richtig. Die Punkte haben zwar unterschiedliche Farben, sind aber nicht den Boxen der Sorten zugeordnet.\\\nMit dem Argument `position=position_jitterdodge()` können wir das ändern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, \n                                            dodge.width=0.75), \n              shape=1, size=1)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n## Transformation der Achsenabstände scale_._()\n\nHäufig weisen Daten eine (Rechts-) Schiefe auf, d.h. es gibt viele kleine und wenige große Werte. Dies ist bei Zähldaten häufig der Fall, die poisson oder negative binomial verteilt sein können oder bei streng positiven diskreten Daten, wie z.B. Biomasse, die gamma-verteilt sein kann. Dabei nimmt die Varianz (die Streuung) häufig mit steigendem Mittelwert zu.\n\nFür die Abbildung solcher Daten eignet sich eine Wurzel- oder Log-Transformation der Achsenabstände durch die die Funktion `scale_y_sqrt()` und `scale_y_log10()`.\n\nFür die Wurzel-Transformation müssen die Werte \\>= 0 sein:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  scale_y_sqrt(limits=c(0,400))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\nFür die logarithmische Skala müssen die Werte \\> 0 sein.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\nlog-10 transformation introduced infinite values.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 8 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\nRemoved 8 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\nIn diesem Datensatz sind Nullen enthalten und wir bekommen eine Warnmeldung, dass diese Werte nicht abgebildet werden. Hier hilft folgender Trick:\n\n-   wir addieren eine kleine Konstante `y+1`\n-   labeln die Skala bei `y+1` mit den Werten von `y`\n-   benennen die Y-Achse `name=\"weight\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight+1))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_log10(breaks=c(0,3, 10,25, 50, 100,250, 500)+1,\n                label=c(0,3, 10, 25, 50, 100,250, 500),\n                lim=c(0,500)+1, name=\"weight\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\nAuch für die wurzeltransformierte Y-Achse können wir die Beschriftung der Achsenticks festlegen. Da wir keine Konstante addiert haben, werden die gleichen Informationen beim Argument `breaks` und `label` eingegeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt(breaks=c(0,20, 50, 100, 200, 400), \n               label=c(0,20, 50, 100, 200, 400), \n               lim=c(0,400))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt(breaks=seq(0,20, by=5)^2, \n               label=seq(0,20, by=5)^2,\n               lim=c(0,400))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n## Komma statt Punkte in Y-Achse\n\nWenn wir Abbildungen in Deutsch verfassen, sollten die Dezimalstellen als Komma dargestellt werden.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight/1000))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_continuous()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\nHierfür gibt es die Möglichkeit über das Argument `labels` und die Funktion `number_format()` der `library(scales)` das Dezimalzeichen als Kommas anzeigen zu lassen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight/1000))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_continuous(labels=scales::number_format(accuracy = 0.01, \n                                                  decimal.mark =\",\"))+\n  ylab(\"Gewicht in kg\")+\n  xlab(\"Methode\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n## `facet_grid()` und `facet_wrap()`\n### Reihenfolge ändern\nDie Reihenfolge der facets (oder auch der Levels im Boxplot) könnt ihr am einfachsten ändern, indem ihr die Reihenfolge der Faktorlevels definiert. Diese werden per default alphanumerisch sortiert.  Ich habe nun nach dem Einlesen der Daten den Faktor `variety.f2` mit dem Code `variety.f2=factor(variety, levels=c(\"Unica\" , \"Costanera\", \"Mariva\"))` in der Funktion `mutate()` eingepflegt und die Levelreihenfolge geändert. Alternativer Code ohne `mutate()` `pot$variety.f2=factor(pot$variety, levels=c(\"Unica\" , \"Costanera\", \"Mariva\"))`\nWeitere tolle Möglichkeiten, um Fakoren zu manipulieren, bietet die `library(forcats)` [https://forcats.tidyverse.org/](https://forcats.tidyverse.org/){target=\"_blank\"}.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety.f2)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\nalternativer Code mit der `library(forcats)` und der Funktion `fct_relevel()`.  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\npot %>% \n  ggplot(aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~fct_relevel(variety, \"Unica\", \"Mariva\"))+# hier neue Reihenfolge eingeben\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n### labeller = label_both\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety, labeller = label_both)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n### labeller = labeller(variety = Sorten.labs)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSorten.labs <- c(\"a) Costanera\", \"b) Mariva\", \"c) Unica\")\nnames(Sorten.labs) <- c(\"Costanera\", \"Mariva\" ,   \"Unica\" )\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety, labeller = labeller(variety = Sorten.labs))+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n### Beschriftung im Plot\n\ndabei bilden x und y die Koordinaten im Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabc=data.frame(label=c(\"a)\", \"b)\", \"c)\"), \n               x=c(20,20,20), y=c(13,13, 13),\n               variety=c(levels(pot$variety.f)))\nabc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  label  x  y   variety\n1    a) 20 13 Costanera\n2    b) 20 13    Mariva\n3    c) 20 13     Unica\n```\n:::\n:::\n\n\ndie Beschrifftung erfolgt dann über die Funktion `geom_text()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety)+\n  geom_text(data  = abc,\n            aes(x = x, y = y, label = label), col=1)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n\n\n## Theme\n\nMit der Funktion \\`theme()´ können Gitterlinien, Beschriftungen, Legenden und vieles mehr angepasst werden. [https://ggplot2.tidyverse.org/reference/theme.html](https://ggplot2.tidyverse.org/reference/theme.html){target=\"_blank\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(colour = \"red\", size = rel(1.5)),\n        legend.position=\"top\",\n        legend.title = element_text(colour=\"blue\", size=10, \n                                      face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\nEs gibt eine Reihe von abgestimmten `themes()`:\n\n### theme_bw\n\nwhite background - weißer Hintergrund und schwarze Gitterlinien\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n### theme_classic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n### theme_pubr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpubr)\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  theme_pubr(base_size = 12, border = TRUE)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n## Farbwahl für fill-Argument\n\n### grey\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  scale_fill_grey() \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n### brewer blau\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.75))+\n  geom_boxplot() +\n  scale_fill_brewer(palette=\"Blues\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\nweitere Beispiele [https://ggplot2.tidyverse.org/reference/scale_brewer.html](https://ggplot2.tidyverse.org/reference/scale_brewer.html){target=\"_blank\"} \n\n\n## Abstand zwischen den Boxen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n   stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.6))+\n  geom_boxplot(position=position_dodge(0.6))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n   stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=0.8))+\n  geom_boxplot(position=position_dodge(0.8)) \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-76-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n   stat_boxplot(geom =\"errorbar\", width = 0.5, position = position_dodge(width=1))+\n  geom_boxplot(position=position_dodge(1)) \n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-76-3.png){width=672}\n:::\n:::\n\n\n\n\n# Alternative zum Boxplot\n## Dotplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_dotplot(binaxis=\"y\", stackdir=\"center\", binwidth = 5)+\n  facet_grid(~variety)+\n  theme(legend.position=\"none\", \n        axis.text.x=element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n## Violinplot\n\n[http://www.sthda.com/english/wiki/ggplot2-violin-plot-quick-start-guide-r-software-and-data-visualization](http://www.sthda.com/english/wiki/ggplot2-violin-plot-quick-start-guide-r-software-and-data-visualization){target=\"_blank\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=method, y=weight))+ \n  geom_violin(trim=F)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-78-2.png){width=672}\n:::\n:::\n\n\n# Übung 3.2.\n\nPlotte:\n\n-   einen Boxplot für Körpergröße in Abhängigkeit von Geschlecht\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=G))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15)+\n  geom_boxplot()+\n  labs(x=\"Geschlecht\", y=\"Körpergröße in cm\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n:::\n  \n-   einen Boxplot für Körpergröße in Abhängigkeit von Geschlecht und Augenfarbe\n\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=AF))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15, position = position_dodge(width=0.75))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\nWir könne den Plot noch schöner gestalten, indem wir die Farben und die Beschriftungen anpassen und die Legende unter den Plot legen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=AF))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15, position = position_dodge(width=0.75))+\n  geom_boxplot()+\n  labs(x=\"Geschlecht\", y=\"Körpergröße in cm\")+\n  scale_fill_manual(values = c(\"skyblue2\", \"peachpuff3\", \"darkseagreen3\"), name=\"Augenfarbe\")+\n  scale_x_discrete(labels=c(\"Männer\", \"Frauen\"))+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=AF))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15, position = position_dodge(width=0.75))+\n  geom_boxplot()+\n  labs(x=\"Geschlecht\", y=\"Körpergröße in cm\")+\n  scale_fill_manual(values = c(\"skyblue2\", \"peachpuff3\", \"darkseagreen3\"), name=\"Augenfarbe\")+\n  scale_x_discrete(labels=c(\"Männer\", \"Frauen\"))+\n  facet_wrap(~AF)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-81-2.png){width=672}\n:::\n:::\n\n:::\n  \n\nZusatzaufgabe:\n\n-   Plotte einen jittered Boxplot von Körpergröße in Relation zum Geschlecht und Augenfarbe\n\n::: {.callout-tip collapse=\"true\"}\n## wichtig\nWenn die Beobachtungen als *jittered* Punkte dargestellt werden, muss in `geom_boxplot()` das Argument `outlier.shape=NA` gesetzt werden, damit die *Ausreißer* nicht doppelt erscheinen. Für eine korrekte Zuordnung der Punkte zu den  Gruppen muss das Argument `position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, dodge.width=0.75)` gesetzt werden. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=AF))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15, position = position_dodge(width=0.75))+\n  geom_boxplot(outlier.shape=NA)+\n  geom_jitter(position=position_jitterdodge(jitter.width = 0.05, jitter.height = 0,\n                                            dodge.width=0.75),\n              shape=1, size=1)+\n  labs(x=\"Geschlecht\", y=\"Körpergröße in cm\")+\n  scale_fill_manual(values = c(\"skyblue2\", \"peachpuff3\", \"darkseagreen3\"), name=\"Augenfarbe\")+\n  scale_x_discrete(labels=c(\"Männer\", \"Frauen\"))+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-82-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(md, aes(x=G, y=KG, fill=AF))+\n  stat_boxplot(geom =\"errorbar\", width = 0.15, position = position_dodge(width=0.75))+\n  geom_boxplot(outlier.shape=NA)+\n  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0,\n                                            dodge.width=0.75),\n              shape=1, size=1)+\n  labs(x=\"Augenfarbe\", y=\"Körpergröße in cm\")+\n  scale_fill_manual(values = c(\"skyblue2\", \"peachpuff3\", \"darkseagreen3\"), name=\"Augenfarbe\")+\n  scale_x_discrete(labels=c(\"Männer\", \"Frauen\"))+\n  facet_wrap(~AF)+\n  theme(legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-82-2.png){width=672}\n:::\n:::\n\n:::\n\nEnde Übung 3.2.\n\n------------------------------------------------------------------------\n\n# Histogramm\n\nzur Darstellung einer kontinuierlichen Variablen\n\n-   Verteilung einer kontinuierlichen Variable\n-   Häufigkeitshistogramm, Dichtehistogramm\n-   Wertebereich\n-   Anzahl Proben im Wertebereich\n-   Schiefe der Verteilung\n\nWir nutzen die Funktion `+ geom_histogram()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight)) + \n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n\n## mit bins und binwidth die Anzahl der Balken (Klassen) ändern\n\nWir können nun die Anzahl der Klassen mit dem Argument `bins = 15` ändern, oder die Klassenbreite mit `binwidth = 25` wählen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight)) + \n  geom_histogram(bins = 15)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight)) + \n  geom_histogram(binwidth = 25)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-84-2.png){width=672}\n:::\n:::\n\n\n## ein Histogramm von weight für die Sorten\n\nMit der Funktion `+ facet_wrap(~ variety)` oder `+ facet_grid(~ variety)` wird ein separater Plot (hier Histogramm) für jedes Gruppierungslevel der `variety` erzeugt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight)) + \n  geom_histogram(binwidth = 25, col=1)+\n  facet_wrap(~ variety)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-85-1.png){width=624}\n:::\n:::\n\n\n# Densityplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight)) + \n  geom_density(adjust=.5)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(weight, colour=variety, fill=variety)) + \n  geom_density(adjust=.5, alpha=.2)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-87-1.png){width=672}\n:::\n:::\n\n\nDas Paket `ggridges` bietet tolle Densityplots an.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\nggplot(data=pot, aes(x = weight, y = method, fill = method)) +\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  scale_fill_viridis_d(name = \"weigth of method:\", option = \"D\")# Farbschema über Option A bis H \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 12.5\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n\nAllerdings wird im Densityplot der Wertebereich weiter dargestellt als beobachtet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x = weight, y = method, col=method, fill=method)) +\n  geom_density_ridges(jittered_points = TRUE,  \n                      position = position_points_jitter(width = 0, height = 0.1, yoffset = -0.2),\n                      alpha = 0.7, scale = 0.7)+ \n  scale_color_viridis_d(name = \"weight of method\", option = \"D\")+\n  scale_fill_viridis_d(guide=\"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 12.5\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n\ndaher können wir auch die Beobachtungen plotten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x = weight, y = method, col=method, fill=method)) +\n  stat_boxplot(geom =\"errorbar\", width=0.15, position= position_nudge(y=-.5), col=\"grey20\")+\n  geom_boxplot(outlier.shape=NA, width=0.15, position= position_nudge(y=-.5), col=\"grey20\")+\n  geom_density_ridges(jittered_points = TRUE, \n                      position = position_points_jitter(width = 0, height = 0.1, yoffset = -0.2),\n                      alpha = 0.7, scale = 0.9)+ \n  scale_color_viridis_d(name = \"weight\", option = \"D\")+\n   scale_fill_viridis_d(guide=\"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 12.5\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-90-1.png){width=768}\n:::\n:::\n\n\nzusammen mit einen Boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pot, aes(x = weight, y = method, fill = method)) +\n  stat_boxplot(geom =\"errorbar\", width=0.15, position= position_nudge(y=-.2), \n               col=\"grey20\", show.legend = FALSE)+\n  geom_boxplot(outlier.shape=NA, width=0.15, position= position_nudge(y=-.2), \n               col=\"grey20\",show.legend = FALSE)+\n  geom_density_ridges2(aes(point_shape = method), alpha = .5, point_alpha = 1, jittered_points = TRUE) +\n  scale_fill_viridis_d()+\n  scale_discrete_manual(aesthetics = \"point_shape\", values = c(21, 22, 23, 24))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 12.5\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\n\n# Barplot mit zwei Y-Achsen\n\n- z.B. zur Darstellung von Wetterdaten (Niederschlag und Temperatur)\n- Niederschlag als Balkendiagramm mit Funktion `geom_bar()`\n- Temperatur als Punkte und verbundene Linie mit `geom_line()` und `geom_point()` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nw=data.frame(Monat=factor(c(\"Jan\", \"Feb\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"Aug\", \"Sept\", \"Okt\", \"Nov\", \"Dez\"),\n             levels=c(\"Jan\", \"Feb\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"Aug\", \"Sept\", \"Okt\", \"Nov\", \"Dez\")),\n             Temp=c(5.0, 6.3, 6.0, 10.7, 12.2, 17.9, 17.5, 20.8, 15.3, 11.6, 7.7, 4.5),\n             Nied=c(25.7, 108.3, 37.4, 13.8, 18.9, 43.6, 63.1, 63.0, 48.7, 61.7, 9.9, 35.0))\n```\n:::\n\n\nMit der Funktion `scale_y_continuous` und dem Argument `sec.axis` erzeugen wir eine zweite y-Achse für die Temperatur. In den Funktionen `geom_line()` und `geom_point()` multipliziere ich die Temperatur mit 5, um sie besser in den Plot zu integrieren und verwende dann die Funktion `sec.axis`, um die Skala der zweiten Achse entsprechend anzupassen, i.e. die Werte wieder durch 5 dividieren.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(w, aes(x = Monat)) +\n  geom_bar(aes(y = Nied), stat = \"identity\", fill = \"skyblue\", alpha = 0.7) +\n  geom_line(aes(y = Temp*5 , group = 1), color = \"red\", linewidth = 1) +\n  geom_point(aes(y = Temp*5), color = \"red\", size = 3) +\n  scale_y_continuous(name = \"Niederschlag (mm)\", breaks=c(0,25,50,75,100),\n    sec.axis = sec_axis(~./5, name = \"Temperatur (°C)\")) +\n  labs(title = \"Monatlicher Niederschlag und Tagestemperatur in Braunschweig 2020\",\n       x = \"Monat\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\n\n\n# Mosaikplot mit `library(vcd)`\n\n-   zur Darstellung von kategorialen Daten\n-   Größe der Rechtecke entspricht beobachtete Häufigkeit eines Merkmals\n-   Farbe entspricht den Abweichungen zwischen beobachteten und erwarteten Häufigkeiten (Residuen)\n\n[https://cran.r-project.org/web/packages/vcd/vignettes/strucplot.pdf](https://cran.r-project.org/web/packages/vcd/vignettes/strucplot.pdf){target=\"_blank\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vcd)\nmosaic(~variety+method+infection, data=pot, shade = TRUE)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-94-1.png){width=576}\n:::\n\n```{.r .cell-code}\nmosaic(~variety+infection, data=pot, shade = TRUE)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-94-2.png){width=576}\n:::\n:::\n\n\n# Layout\n\n\n## Vier Plots in einer Grafik\n\nUm mehrere Plots in einer Grafik abzubilden, müssen die Plots zunächst einzeln in Objekten gespeichert werden (z.B. `p1` bis `p4`), um dann mit der Funktion `grid.arrange(p1,p2,p3,p4, ncol=2)` der `library(gridExtra)` geplottet zu werden. Mit dem Argument `ncol` kann die Anzahl der Spalten bestimmt werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttache Paket: 'gridExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDas folgende Objekt ist maskiert 'package:dplyr':\n\n    combine\n```\n:::\n\n```{.r .cell-code}\np1=ggplot(data=pot, aes(weight, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)\n\np2=ggplot(data=pot, aes(x=method, y=weight, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)\n\np3=ggplot(data=pot, aes(tubers, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)\n\np4=ggplot(data=pot, aes(x=method, y=tubers, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)\n\ngrid.arrange(p1,p2,p3,p4, ncol=2)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-95-1.png){width=768}\n:::\n:::\n\n\nDas ist noch nicht wirklich schön. Die Legenden nehmen zu viel Platz ein. Alle Plots haben zudem die gleiche Legende. Diese Redundanz können wir entfernen, indem wir nur im ersten Plot eine Legende zeichnen und dabei diese durch das Argument `theme(legend.position=c(0.8,0.7))` in den Plot zeichnen. Bei den anderen Plots unterdrücken wir durch `theme(legend.position=\"none\")` die Legende.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1=ggplot(data=pot, aes(weight, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)+ \n  theme(legend.position=c(0.8,0.7)) #Legende innerhalb der Plotoberfläche\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\ni Please use the `legend.position.inside` argument of `theme()` instead.\n```\n:::\n\n```{.r .cell-code}\np2=ggplot(data=pot, aes(x=method, y=weight, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+ \n  theme(legend.position=\"none\") #ohne Legende\n\np3=ggplot(data=pot, aes(tubers, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)+ \n  theme(legend.position=\"none\")\n\np4=ggplot(data=pot, aes(x=method, y=tubers, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+ \n  theme(legend.position=\"none\")\n\ngrid.arrange(p1,p2,p3,p4, ncol=2)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-96-1.png){width=768}\n:::\n:::\n\n\nSchon besser.\n\n## Vier Plots in einer Grafik mit einer Legende mit `library(ggpubr)`\n\nEine weitere Möglichkeit bietet die `library(ggpubr)` mit der Funktion `ggarrange()`. Hier können auch die einzelnen Plots z.B. mit a), b), c) und d) beschriftet werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpubr)\nggarrange(p1, p2, p3, p4, labels = c(\"a)\", \"b)\", \"c)\", \"d)\"), font.label = list(face=\"plain\"),\n          common.legend = TRUE, legend = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-97-1.png){width=768}\n:::\n:::\n\n\nDas Argument `align=\"hv\"` richtet die Plots horizontal und vertikal aus (vgl. a) und c) oben mit dieser Grafik unten). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(p1, p2, p3, p4, labels = c(\"a)\", \"b)\", \"c)\", \"d)\"), font.label = list(face=\"plain\"),\n          common.legend = TRUE, legend = \"bottom\", align=\"hv\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-98-1.png){width=768}\n:::\n:::\n\n\nAusserdem kann auch die relative Breite der Plots geändert werden. \n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(p1, p2, p3, p4, labels = c(\"a)\", \"b)\", \"c)\", \"d)\"), font.label = list(face=\"plain\"),\n          common.legend = TRUE, legend = \"bottom\", align=\"hv\", widths = c(0.6,0.4))\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-99-1.png){width=768}\n:::\n:::\n\n\n## R-Logo im Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR_png <- png::readPNG(\"R_logo.png\", native = TRUE)\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  patchwork::inset_element(p = R_png,\n                left = 0.01,\n                bottom = 0.8,\n                right = 0.15,\n                top = 0.99)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-100-1.png){width=672}\n:::\n:::\n\n\n# Abbildung speichern\n\nAlle Abbildungen, die mit `ggplot()` erstellt werden, können als pdf, tiff, jpg, eps usw. im *working directory* gespeichert werden. Zudem kann man über die Argumente die Größe und die Auflösung bestimmen. Das Argument `scale` skaliert die Punkte und Buchstaben relativ zur Plotgröße.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen\")\nggsave(\"plot1.pdf\")\nggsave(\"plot2.pdf\", width = 10, height = 8, units = \"cm\")\nggsave(\"plot2.1.pdf\", width = 10, height = 8, units = \"cm\", scale=1.3)\nggsave(\"plot2.2.pdf\", width = 10, height = 8, units = \"cm\", scale=0.7)\nggsave(\"plot3.tiff\", dpi=600, width =10, height = 8, units = \"cm\", compression=\"lzw\")\n```\n:::\n\n\n# Übung 3.3.\n\nPlotte:\n\n-   ein Histogramm von Körpergröße\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=md, aes(KG)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-102-1.png){width=672}\n:::\n:::\n\n:::\n  \n\n-   ein Histogramm von Körpergröße getrennt für Frauen und Männer\n\n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=md, aes(KG, fill=G)) +\n  geom_histogram(binwidth = 5, col=1)+\n  ylab(\"Anzahl\")+\n  xlab(\"Körpergröße in cm\")+\n  facet_wrap(~ G)+\n  labs(fill=\"Geschlecht\")\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-103-1.png){width=672}\n:::\n:::\n\n:::\n  \n-   Plotte einen Mosaikplot für das Auftreten der Kombinationen aus Augenfarbe und Geschlecht\n\n::: {.callout-tip collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vcd)\nmosaic(~G+AF, data=md, shade = TRUE)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-104-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmosaic(~AF+G, data=md, shade = TRUE)\n```\n\n::: {.cell-output-display}\n![](03_Graph_files/figure-html/unnamed-chunk-104-2.png){width=672}\n:::\n:::\n\n:::\n\nEnde Übung 3.3.\n\n------------------------------------------------------------------------\n",
    "supporting": [
      "03_Graph_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}