{
  "hash": "7e0a1e14e74c25267d3809cf017b68a9",
  "result": {
    "markdown": "---\ntitle: \"Allgemeines\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Literatur\n\nDiese Bücher sind teilweise etwas älter (was die R-Codes anbetrifft). Sie geben aber trotzdem einen guten Einblick in die Statistik und Anwendung von R.\n\nCrawley 2013: The R Book. 2nd Edition, E-Book unter [http://onlinelibrary.wiley.com/book/10.1002/9781118448908](http://onlinelibrary.wiley.com/book/10.1002/9781118448908){target=\"_blank\"}\\\nCrawley 2013: Statistik mit R.\\\nDormann 2013: Parametrische Statistik.\\\nBurnham und Anderson 2002: Model Selection and Multimodel Inference.\\\nJames, Witten, Hastie & Tibshirani 2023: An Introduction to Statistical Learning with Applications in R. [https://hastie.su.domains/ISLR2/ISLRv2_corrected_June_2023.pdf.download.html](https://hastie.su.domains/ISLR2/ISLRv2_corrected_June_2023.pdf.download.html){target=\"_blank\"} Hastie, Tibshirani & Friedman 2017: The Elements of Statistical Learning - Data Mining, Inference and Prediction [https://hastie.su.domains/ElemStatLearn/printings/ESLII_print12_toc.pdf](https://hastie.su.domains/ElemStatLearn/printings/ESLII_print12_toc.pdf){target=\"_blank\"}\n\n------------------------------------------------------------------------\n\n## Webseiten\n\n-   Kursskripte der vorangegangenen Inhouse-Schulungen sowie der zentralen Biometriekurse des BMEL findet ihr im Intranet unter Forschung Biometrie\n-   viele Tutorien im Netz und auf YouTube\n-   R Cookbook [https://rc2e.com/](https://rc2e.com/){target=\"_blank\"}\n-   DSFAIR von Paul Schmidt [https://schmidtpaul.github.io/dsfair_quarto/](https://schmidtpaul.github.io/dsfair_quarto/){target=\"_blank\"}\n-   Mailing lists und archives auf [http://www.r-project.org/](http://www.r-project.org/){target=\"_blank\"}\n-   [http://de.wikibooks.org/wiki/GNU_R](http://de.wikibooks.org/wiki/GNU_R){target=\"_blank\"}\n\n## Hilfe in R\n\n-   `help.start()`\n-   Hilfeseite öffnet sich durch `?Funktion` z.B. `?mean`\n-   Vergleiche `?mean` vs. `??mean`\n\n## Pakete installieren und laden\n\n-   entweder im Editor `install.packages(\"Paketname\")` z.B. `install.packages(\"nlme\")`\n-   oder über das Fenster *Packages/Install* und dann Name des Package z.B. nlme eintragen und *Install* klicken\n-   Laden der Pakete einmal pro Session durch die Funktion `library(\"Paketname\")` z.B. `library(\"nlme\")`\n\n## Grundlagen Programmiersprache R\n\n-   R unterscheidet zwischen Groß- und Kleinschreibung\n-   Leerzeichen werden normalerweise ignoriert, d.h. kein Unterschied `2+5` vs. `2 + 5`\n-   Kommentare werden mit \\# markiert und dadurch nicht als Befehl von R erkannt, sondern als Text\n-   Zeilenumbruch bei langen Befehlen kein Problem (ein + erscheint in der nächsten Zeile)\n-   Normale Rechenoperationen + - \\* /\n-   Achtung ein : bedeutet nicht \"geteilt durch\"! Probier es aus `10:5`\n-   `log()`, `log10()`, `exp()`, `sqrt()`, `2^2`, `2^0.5`\n\n## R ist objektorientiert\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\n```\n:::\n\n\nDie 5 wird dem Objekt `a` zugewiesen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- 3\n```\n:::\n\n\nDie 3 wird dem Objekt `b` zugewiesen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- a + b\n```\n:::\n\n\n`c` ist die Summe aus `a` und `b`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n## Datentypen\n\nObjekte können verschieden Datentypen zugehören.\n\n-   Numeric (Zahl)\n-   Character (Zeichenketten, z.B. \"Messeweg\")\n-   Logical (TRUE, FALSE)\n-   Factor (Kategoriale Daten mit verschiedenen *Levels*, z.B. hoch, mittel, niedrig oder rot, blau, gelb)\n\n## Datenstrukturen\n\n-   `vector` (eindimensionale Vektoren)\n-   `matrix` (zweidimensionale Matrizen)\n-   `array` (verallgemeinerte Matrizen mit auch mehr als zwei Dimensionen)\n-   `list` (Listen)\n-   `data.frame` (Datensätze i.e. Tabelle mit unterschiedlichen Datentypen je Spalte)\n-   `function` (Funktionen)\n\n## Funktionen\n\nBeim Aufruf von Funktionen sind die Werte, die der Funktion als Berechnungsgrundlage dienen, in runde Klammern einzuschließen: z.B.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(1.358) # runden einer Zahl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nDie Argumentliste besteht aus Zuweisungen an Argumenten in der Form `Argumentname=Wert`, die der Funktion die notwendigen Eingangsinformationen liefern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(1.358, digits=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.4\n```\n:::\n\n```{.r .cell-code}\nround(1.358, 1)# nur eine Kommastelle\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.4\n```\n:::\n:::\n\n\nEs können je nach Funktion ein oder mehrere durch Komma getrennte Argumente angegeben werden, die ihrerseits obligatorisch oder nur optional sein können. Funktionen können ineinander verschachtelt werden z.B.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(mean(c(3,6,2,8)), digits=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.8\n```\n:::\n:::\n\n\nAuf eine Kommastelle gerundeter Mittelwert aus den Zahlen 3, 6, 2 und 8.\n\nDie Hilfeseite für eine Funktion öffnet sich durch `?round`.\n\n### Beispiel Funktion `seq` und `rep`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 8, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 8\n```\n:::\n\n```{.r .cell-code}\nseq(from = 2, to = 8, by= 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0\n```\n:::\n\n```{.r .cell-code}\nseq(from = 0, to = 9, length = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 3 6 9\n```\n:::\n\n```{.r .cell-code}\nrep(1:5, times = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 4 5 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nrep(1:5, each = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 2 2 3 3 4 4 5 5\n```\n:::\n\n```{.r .cell-code}\nrep(c(\"A\",\"B\"), times = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"A\" \"B\"\n```\n:::\n:::\n\n\n## Daten einlesen\n\n-   Spaltenbenennung (Variablen) ohne Leerzeichen, keine Zahlen am Anfang, kein + - / % besser \\_\n-   kurze, prägnante Variablennamen (Stickstoffduengermenge besser ND), Objektnamen (z.B. für den `data.frame` Stickstoffversuchsdaten besser ndat) und Pfadnamen (ohne ä, ö & ü)\n-   Missing Values in Excel leer lassen oder als NA in csv\n\n### Daten direkt aus Excel einlesen\n\nDiesen Datensatz [potato.xlsx](https://github.com/DoreenGabriel/Kurs/blob/main/Themen/01/potato.xlsx){target=\"_blank\"} können wir direkt mit der `library(openxlsx)` aus Excel einlesen.\n\n![](potato.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nmd<-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n```\n:::\n\n```{.r .cell-code}\n# oder\nmd<-read.xlsx(\"potato.xlsx\", sheet=\"Tabelle1\")\n```\n:::\n\n\nSolltet ihr mit RMarkdown arbeiten, dann werden die Daten (ohne Pfadangabe) aus dem Ordner in dem auch das .Rmd gespeichert ist eingelesen.\n\n-   alternativ könnt ihr den Pfad angeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# entweder\nmd<-read.xlsx(\"D:/R/Kartoffelversuch/potato.xlsx\", sheet=1)\n# oder\nmd<-read.xlsx(\"D:\\\\R\\\\Kartoffelversuch\\\\potato.xlsx\", sheet=1)\n```\n:::\n\n\noder\n\n-   ihr setzt das *working directory*\\\n-   und lest dann die Daten ohne Angabe des Pfades ein\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/R/Kartoffelversuch\") \nmd<-read.xlsx(\"potato.xlsx\", sheet=1)\n```\n:::\n\n\nÜber das Argument `startRow` können Zeilen übersprungen werden. Wenn bspw. die erste Zeile die ausführliche Beschreibung der Spalteninformation enthält und erst in der zweiten Zeile die kurzen prägnanten Variablennamen stehen, dann kann mit `startRow=2` der Datensatz ab Zeile 2 eingelesen werden.\n\n![](potato_Zeile_2.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd<-read.xlsx(\"potato_Zeile_2.xlsx\", sheet=1, startRow=2)\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t478 obs. of  6 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n```\n:::\n:::\n\n\n*Missing values* in Excel leer lassen. R zeigt diese missing values als NA an. ![](potato_NA.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd2<-read.xlsx(\"potato_NA.xlsx\", sheet=1)\nhead(md2)# zeigt die ersten 6 Zeilen an\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  variety method plant tubers weight infection\n1   Unica    pot     1      9  209.9         0\n2   Unica    pot     2      3  248.4         0\n3   Unica    pot     3      4     NA         0\n4   Unica    pot     4      4   77.2         0\n5   Unica    pot     5      2   11.3         1\n6   Unica    pot     6      2   17.8         0\n```\n:::\n:::\n\n\n### als .csv\n\n-   in Excel ein Tabellenblatt als .csv oder .txt speichern\n-   funktion `read.table` für .txt oder `read.csv` für .csv mit den Argumenten:\n    -   `header=TRUE` bedeutet, dass in der ersten Zeile die Variablenbezeichnungen stehen\n    -   `sep` ist der Separator, kann Komma, Semikolon oder Tab sein\n    -   `dec` ist das Dezimalzeichen, kann Komma oder Punkt sein\n    -   `read.csv()` für englische Excel-Einstellungen\n    -   `read.csv2()` für deutsche Excel-Einstellungen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd<-read.csv2(\"potato.csv\", header=TRUE)\n# wenn csv unter englischen Excel-Einstellungen gespeichert wurde\nmd<- read.csv(\"potato.csv\", header = TRUE, sep = \",\", dec = \".\")  \n# wenn csv unter deutschen Excel-Einstellungen gespeichert wurde\nmd<- read.csv2(\"potato.csv\", header = TRUE, sep = \";\", dec = \",\") \n```\n:::\n\n\n### als .txt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd<- read.table(\"potato.txt\", header = TRUE, sep = \"\", dec = \".\")\n```\n:::\n\n\n### Dateneinlesen in R-Studio per Klick\n\nEine weitere Alternative bietet R-Studio auf *Environment/Import Dataset*. Hier kann man sich durchklicken, um Daten zu importieren. Man sollte aber unbedingt den R-Code nach erfolgtem Import ins Skript kopieren, damit man ihn in der nächsten Sitzung ausführen kann. So behält man den Überblick, welche Daten zur Analyse genutzt wurden. Außerdem können nur so auch Dritte den Import der Daten nachvollziehen. Stichwort *reproducible research*.\n\nDer Datenimport aus anderen Statistikprogrammen (SPSS, Stata, SAS) ist mit dem Package `foreign` oder aus Datenbanken mit dem Package `RODBC` möglich.\n\n## Datenstruktur prüfen\n\nNach erfolgtem Import sollte **immer** die Struktur der Daten durch die Funktion `str()` z.B. `str(md)` überprüft werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t478 obs. of  6 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n```\n:::\n:::\n\n\nWir sehen hier, dass die Sorte und Methode als `Character` eingelesen wurde und alle anderen Spalten numerisch sind. Schaut bitte zum Kapitel \\[Beispieldatensatz potato.xlsx\\], wie `Character` in Faktoren umgewandelt werden.\n\nMit den Funktionen `head()`und `tail()` lässt man sich die ersten und letzten 6 Zeilen des Datensatzes anzeigen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  variety method plant tubers weight infection\n1   Unica    pot     1      9  209.9         0\n2   Unica    pot     2      3  248.4         0\n3   Unica    pot     3      4   53.6         0\n4   Unica    pot     4      4   77.2         0\n5   Unica    pot     5      2   11.3         1\n6   Unica    pot     6      2   17.8         0\n```\n:::\n\n```{.r .cell-code}\ntail(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      variety    method plant tubers weight infection\n473 Costanera aeroponic     5      7   22.7         0\n474 Costanera aeroponic     6      5   38.4         1\n475 Costanera aeroponic     7      3   28.4         0\n476 Costanera aeroponic     8      6   29.1         1\n477 Costanera aeroponic     9      4   17.6         0\n478 Costanera aeroponic    10      7   36.9         0\n```\n:::\n:::\n\n\n## Datenexport\n\nWir können die Daten exportieren.\n\n-   mit dem Package `openxlsx`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nwrite.xlsx(md, \"potato.export2.xlsx\")\n```\n:::\n\n\nDas Package `openxlsx` bietet die Möglichkeit, unterschiedliche Datensätze in mehreren Tabellenblättern in einer xlsx-Datei zu speichern. Hier mal exemplarisch, indem wir den potato-Datensatz mit einer summary statistics (siehe Kapitel Deskriptive Statistik) in zwei Tabellenblättern in einer Datei speichern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmd.sum=md %>% group_by(variety, method) %>% \n  summarise(weight_avg=mean(weight, na.rm = TRUE),\n            weight_sd=sd(weight, na.rm = TRUE))\nmd.sum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n# Groups:   variety [3]\n   variety   method     weight_avg weight_sd\n   <chr>     <chr>           <dbl>     <dbl>\n 1 Costanera aeroponic        40.2     16.6 \n 2 Costanera bed              87.5     32.6 \n 3 Costanera hydroponic       25.1      8.17\n 4 Costanera pot             141.      22.2 \n 5 Mariva    aeroponic        95.4     54.8 \n 6 Mariva    bed              96.8     54.8 \n 7 Mariva    hydroponic       14.3      9.34\n 8 Mariva    pot              92.2     27.4 \n 9 Unica     aeroponic        88.5     70.8 \n10 Unica     bed              69.1     36.4 \n11 Unica     hydroponic       26.3     14.1 \n12 Unica     pot              94.6     60.3 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwb <- createWorkbook()\naddWorksheet(wb, sheetName = \"Kartoffeldaten\")\nwriteData(wb, \"Kartoffeldaten\", md) \naddWorksheet(wb, sheetName = \"summary statistics\")\nwriteData(wb, \"summary statistics\", md.sum) \nsaveWorkbook(wb, file = \"potato.export3.xlsx\", overwrite = TRUE)\n```\n:::\n\n\n## Datenformat\n\nDas *flat format* ist gegenüber dem *wide format* zu bevorzugen.\n\nBsp. *flat format*\n\n| Behandl | Ertrag |\n|---------|--------|\n| N0      | 3.5    |\n| N0      | 1.5    |\n| N0      | 2.8    |\n| N0      | 3.1    |\n| N100    | 6.4    |\n| N100    | 7.4    |\n| N100    | 5.8    |\n| N100    | 5.4    |\n| N200    | 5.9    |\n| N200    | 8.4    |\n| N200    | 7.7    |\n| N200    | 6.7    |\n\nBsp. *wide format*\n\n| Kontrolle | N-Level 100 | N-Level 200 |\n|-----------|-------------|-------------|\n| 3.5       | 6.4         | 5.9         |\n| 1.5       | 7.4         | 8.4         |\n| 2.8       | 5.8         | 7.7         |\n| 3.1       | 5.4         | 6.7         |\n\nR kann vom *wide* zum *flat format* (und zurück) konvertieren, z.B. mit der Funktion `melt` aus der `library(reshape2)`. Siehe auch [http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/](http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/){target=\"_blank\"}.\n\n------------------------------------------------------------------------\n\n## Übung 1\n\nDie Körpergröße, Schuhgröße, Geschlecht und Augenfarbe von Kursteilnehmer wurde ermittelt. Importiere bitte die Daten [Kursteilnehmer.xlsx](https://github.com/DoreenGabriel/Kurs/blob/main/Themen/01/Kursteilnehmer.xlsx){target=\"_blank\"} in R und benenne den data.frame mit `md`. \n\n::: {.callout-tip collapse=\"true\"}\n### Daten einlesen und prüfen\nDer Datensatz hat in der ersten Zeile eine detaillierte und in der zweiter Zeile die kurze Variablenbezeichnung. Daher lese ich die Daten mit dem Argument `startRow = 2` erst ab der zweiten Zeile ein. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nmd<-read.xlsx(\"Kursteilnehmer.xlsx\", sheet=1, startRow = 2)\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t72 obs. of  5 variables:\n $ Name: chr  \"Colton\" \"Kyle\" \"Brandon\" \"Cory\" ...\n $ KG  : num  181 183 186 184 172 186 183 197 180 184 ...\n $ SG  : num  42 44 42 45 43 43 42 45 43 43 ...\n $ AF  : chr  \"braun\" \"braun\" \"braun\" \"blau\" ...\n $ G   : chr  \"m\" \"m\" \"m\" \"m\" ...\n```\n:::\n:::\n\n:::\n\n\nLerne die Daten und folgende Funktionen kennen:\n\n+ str(md) \n+ names(md) \n+ head(md) \n+ tail(md) \n+ md\\[,\\] \n+ md\\[1,\\] \n+ md\\[,3\\] \n+ md\\[,-3\\] \n+ md\\[1:3,\\] \n+ md\\[,1:3\\]\\\n+ md\\[2,2:4\\] \n+ md\\[,c(2,4)\\]\n\n::: {.callout-tip collapse=\"true\"}\n### Funktionen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(md) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t72 obs. of  5 variables:\n $ Name: chr  \"Colton\" \"Kyle\" \"Brandon\" \"Cory\" ...\n $ KG  : num  181 183 186 184 172 186 183 197 180 184 ...\n $ SG  : num  42 44 42 45 43 43 42 45 43 43 ...\n $ AF  : chr  \"braun\" \"braun\" \"braun\" \"blau\" ...\n $ G   : chr  \"m\" \"m\" \"m\" \"m\" ...\n```\n:::\n\n```{.r .cell-code}\nnames(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\" \"KG\"   \"SG\"   \"AF\"   \"G\"   \n```\n:::\n\n```{.r .cell-code}\nhead(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name  KG SG    AF G\n1  Colton 181 42 braun m\n2    Kyle 183 44 braun m\n3 Brandon 186 42 braun m\n4    Cory 184 45  blau m\n5   Heath 172 43  blau m\n6   Jesse 186 43  blau m\n```\n:::\n\n```{.r .cell-code}\ntail(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Name  KG SG    AF G\n67  Felicia 172 40 braun w\n68  Carissa 170 40  blau w\n69 Danielle 164 37 gruen w\n70 Kaytlynn 186 42 braun w\n71   Lauren 168 40 braun w\n72   Jenine 168 37 braun w\n```\n:::\n\n```{.r .cell-code}\nmd[,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Name  KG SG    AF G\n1         Colton 181 42 braun m\n2           Kyle 183 44 braun m\n3        Brandon 186 42 braun m\n4           Cory 184 45  blau m\n5          Heath 172 43  blau m\n6          Jesse 186 43  blau m\n7         Daniel 183 42 braun m\n8         Bradin 197 45 braun m\n9          David 180 43  blau m\n10          Kyle 184 43 braun m\n11       Brandon 189 48  blau m\n12          Luke 177 44  blau m\n13       Cameron 181 43 braun m\n14        Justin 160 38 gruen m\n15 Jackson Payne 176 42 braun m\n16          Cole 180 43  blau m\n17         Riley 184 44 gruen m\n18         Lance 173 40  blau m\n19         Nakai 178 43 braun m\n20       Garrett 182 43 braun m\n21       Braxton 180 44  blau m\n22          Noah 200 45  blau m\n23        Brolon 178 44 braun m\n24          Mark 183 43  blau m\n25        George 178 44  blau m\n26        Camron 183 44  blau m\n27        Bryson 180 41 braun m\n28      Benjamin 192 43  blau m\n29          Drew 178 41  blau m\n30         Brian 163 42 gruen m\n31          Kyle 173 42  blau m\n32         Jacob 178 42 gruen m\n33         Paige 177 40 braun w\n34       Allison 170 41 gruen w\n35       Janelle 167 39  blau w\n36        Ashlie 163 39 braun w\n37       Kathryn 170 37  blau w\n38        Jordan 150 36  blau w\n39         Kiana 152 35  blau w\n40     Kimberlyn 164 40  blau w\n41         Sydne 165 38 braun w\n42       Jessica 170 38 braun w\n43        Morgan 173 41 gruen w\n44         Janie 167 39  blau w\n45        Soraya 170 39 gruen w\n46         Grace 168 39 braun w\n47      Danielle 167 39 braun w\n48     Elizabeth 163 37 braun w\n49       Kaitlyn 172 38 gruen w\n50      Bethanie 167 39 braun w\n51        Kelsey 164 38  blau w\n52         Dixie 170 39 braun w\n53      Brynelle 165 37 gruen w\n54       Andreah 162 38 braun w\n55      Ashleigh 170 40 braun w\n56       Kellcie 180 39  blau w\n57        Maggie 168 38  blau w\n58       Cassidy 157 38  blau w\n59       Mallory 160 38 gruen w\n60       Lindsay 168 38 braun w\n61          Erin 162 39 braun w\n62          Erin 160 38 gruen w\n63         Hanna 172 41 braun w\n64         Traci 175 41 braun w\n65        Hannah 176 39 braun w\n66    Mattielien 154 38  blau w\n67       Felicia 172 40 braun w\n68       Carissa 170 40  blau w\n69      Danielle 164 37 gruen w\n70      Kaytlynn 186 42 braun w\n71        Lauren 168 40 braun w\n72        Jenine 168 37 braun w\n```\n:::\n\n```{.r .cell-code}\nmd[,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 42 44 42 45 43 43 42 45 43 43 48 44 43 38 42 43 44 40 43 43 44 45 44 43 44\n[26] 44 41 43 41 42 42 42 40 41 39 39 37 36 35 40 38 38 41 39 39 39 39 37 38 39\n[51] 38 39 37 38 40 39 38 38 38 38 39 38 41 41 39 38 40 40 37 42 40 37\n```\n:::\n\n```{.r .cell-code}\nmd[1,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Name  KG SG    AF G\n1 Colton 181 42 braun m\n```\n:::\n\n```{.r .cell-code}\nmd[,-3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Name  KG    AF G\n1         Colton 181 braun m\n2           Kyle 183 braun m\n3        Brandon 186 braun m\n4           Cory 184  blau m\n5          Heath 172  blau m\n6          Jesse 186  blau m\n7         Daniel 183 braun m\n8         Bradin 197 braun m\n9          David 180  blau m\n10          Kyle 184 braun m\n11       Brandon 189  blau m\n12          Luke 177  blau m\n13       Cameron 181 braun m\n14        Justin 160 gruen m\n15 Jackson Payne 176 braun m\n16          Cole 180  blau m\n17         Riley 184 gruen m\n18         Lance 173  blau m\n19         Nakai 178 braun m\n20       Garrett 182 braun m\n21       Braxton 180  blau m\n22          Noah 200  blau m\n23        Brolon 178 braun m\n24          Mark 183  blau m\n25        George 178  blau m\n26        Camron 183  blau m\n27        Bryson 180 braun m\n28      Benjamin 192  blau m\n29          Drew 178  blau m\n30         Brian 163 gruen m\n31          Kyle 173  blau m\n32         Jacob 178 gruen m\n33         Paige 177 braun w\n34       Allison 170 gruen w\n35       Janelle 167  blau w\n36        Ashlie 163 braun w\n37       Kathryn 170  blau w\n38        Jordan 150  blau w\n39         Kiana 152  blau w\n40     Kimberlyn 164  blau w\n41         Sydne 165 braun w\n42       Jessica 170 braun w\n43        Morgan 173 gruen w\n44         Janie 167  blau w\n45        Soraya 170 gruen w\n46         Grace 168 braun w\n47      Danielle 167 braun w\n48     Elizabeth 163 braun w\n49       Kaitlyn 172 gruen w\n50      Bethanie 167 braun w\n51        Kelsey 164  blau w\n52         Dixie 170 braun w\n53      Brynelle 165 gruen w\n54       Andreah 162 braun w\n55      Ashleigh 170 braun w\n56       Kellcie 180  blau w\n57        Maggie 168  blau w\n58       Cassidy 157  blau w\n59       Mallory 160 gruen w\n60       Lindsay 168 braun w\n61          Erin 162 braun w\n62          Erin 160 gruen w\n63         Hanna 172 braun w\n64         Traci 175 braun w\n65        Hannah 176 braun w\n66    Mattielien 154  blau w\n67       Felicia 172 braun w\n68       Carissa 170  blau w\n69      Danielle 164 gruen w\n70      Kaytlynn 186 braun w\n71        Lauren 168 braun w\n72        Jenine 168 braun w\n```\n:::\n\n```{.r .cell-code}\nmd[1:3,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name  KG SG    AF G\n1  Colton 181 42 braun m\n2    Kyle 183 44 braun m\n3 Brandon 186 42 braun m\n```\n:::\n\n```{.r .cell-code}\nmd[,1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Name  KG SG\n1         Colton 181 42\n2           Kyle 183 44\n3        Brandon 186 42\n4           Cory 184 45\n5          Heath 172 43\n6          Jesse 186 43\n7         Daniel 183 42\n8         Bradin 197 45\n9          David 180 43\n10          Kyle 184 43\n11       Brandon 189 48\n12          Luke 177 44\n13       Cameron 181 43\n14        Justin 160 38\n15 Jackson Payne 176 42\n16          Cole 180 43\n17         Riley 184 44\n18         Lance 173 40\n19         Nakai 178 43\n20       Garrett 182 43\n21       Braxton 180 44\n22          Noah 200 45\n23        Brolon 178 44\n24          Mark 183 43\n25        George 178 44\n26        Camron 183 44\n27        Bryson 180 41\n28      Benjamin 192 43\n29          Drew 178 41\n30         Brian 163 42\n31          Kyle 173 42\n32         Jacob 178 42\n33         Paige 177 40\n34       Allison 170 41\n35       Janelle 167 39\n36        Ashlie 163 39\n37       Kathryn 170 37\n38        Jordan 150 36\n39         Kiana 152 35\n40     Kimberlyn 164 40\n41         Sydne 165 38\n42       Jessica 170 38\n43        Morgan 173 41\n44         Janie 167 39\n45        Soraya 170 39\n46         Grace 168 39\n47      Danielle 167 39\n48     Elizabeth 163 37\n49       Kaitlyn 172 38\n50      Bethanie 167 39\n51        Kelsey 164 38\n52         Dixie 170 39\n53      Brynelle 165 37\n54       Andreah 162 38\n55      Ashleigh 170 40\n56       Kellcie 180 39\n57        Maggie 168 38\n58       Cassidy 157 38\n59       Mallory 160 38\n60       Lindsay 168 38\n61          Erin 162 39\n62          Erin 160 38\n63         Hanna 172 41\n64         Traci 175 41\n65        Hannah 176 39\n66    Mattielien 154 38\n67       Felicia 172 40\n68       Carissa 170 40\n69      Danielle 164 37\n70      Kaytlynn 186 42\n71        Lauren 168 40\n72        Jenine 168 37\n```\n:::\n\n```{.r .cell-code}\nmd[2,2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   KG SG    AF\n2 183 44 braun\n```\n:::\n\n```{.r .cell-code}\nmd[,c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    KG    AF\n1  181 braun\n2  183 braun\n3  186 braun\n4  184  blau\n5  172  blau\n6  186  blau\n7  183 braun\n8  197 braun\n9  180  blau\n10 184 braun\n11 189  blau\n12 177  blau\n13 181 braun\n14 160 gruen\n15 176 braun\n16 180  blau\n17 184 gruen\n18 173  blau\n19 178 braun\n20 182 braun\n21 180  blau\n22 200  blau\n23 178 braun\n24 183  blau\n25 178  blau\n26 183  blau\n27 180 braun\n28 192  blau\n29 178  blau\n30 163 gruen\n31 173  blau\n32 178 gruen\n33 177 braun\n34 170 gruen\n35 167  blau\n36 163 braun\n37 170  blau\n38 150  blau\n39 152  blau\n40 164  blau\n41 165 braun\n42 170 braun\n43 173 gruen\n44 167  blau\n45 170 gruen\n46 168 braun\n47 167 braun\n48 163 braun\n49 172 gruen\n50 167 braun\n51 164  blau\n52 170 braun\n53 165 gruen\n54 162 braun\n55 170 braun\n56 180  blau\n57 168  blau\n58 157  blau\n59 160 gruen\n60 168 braun\n61 162 braun\n62 160 gruen\n63 172 braun\n64 175 braun\n65 176 braun\n66 154  blau\n67 172 braun\n68 170  blau\n69 164 gruen\n70 186 braun\n71 168 braun\n72 168 braun\n```\n:::\n:::\n\n\n:::\n\nEnde Übung 1\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}