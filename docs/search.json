[
  {
    "objectID": "Themen/03/03_Graph.html",
    "href": "Themen/03/03_Graph.html",
    "title": "Grafische Darstellungen",
    "section": "",
    "text": "Bevor Daten statistisch analysiert werden, sollten sie grafisch dargestellt werden, um mögliche Fehler, Ausreißer oder Muster zu erkennen. Darüber hinaus ist die grafische Darstellung der Daten für die Präsentation und Interpretation statistischer Modelle unerlässlich.\nlibrary(openxlsx)\nlibrary(dplyr)\npot&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\npot=pot %&gt;% \n    mutate(variety.f=as.factor(variety),\n           method.f=as.factor(method),\n           infection.f=as.factor(infection))\nstr(pot)\n\n'data.frame':   478 obs. of  10 variables:\n $ variety    : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method     : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant      : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers     : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight     : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection  : num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity   : num  26.1 30.2 52.5 34 49.6 ...\n $ variety.f  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method.f   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ infection.f: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 1 1 1 ..."
  },
  {
    "objectID": "Themen/03/03_Graph.html#achsenbeschriftung-labs",
    "href": "Themen/03/03_Graph.html#achsenbeschriftung-labs",
    "title": "Grafische Darstellungen",
    "section": "Achsenbeschriftung labs()",
    "text": "Achsenbeschriftung labs()\nMit der Funktion + labs(title=\" \", x=\" \", y=\" \") werden in die ” ” die Beschriftungen eingefügt.\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen\")"
  },
  {
    "objectID": "Themen/03/03_Graph.html#achsenlimitierung-coord_cartesian",
    "href": "Themen/03/03_Graph.html#achsenlimitierung-coord_cartesian",
    "title": "Grafische Darstellungen",
    "section": "Achsenlimitierung coord_cartesian()",
    "text": "Achsenlimitierung coord_cartesian()\nMit der Funktion coord_cartesian(xlim=c(,), ylim=c(,)) ändert man das Minimum und Maximum der x- und y-Achse.\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#alle-layer-über-verbinden",
    "href": "Themen/03/03_Graph.html#alle-layer-über-verbinden",
    "title": "Grafische Darstellungen",
    "section": "alle Layer über + verbinden",
    "text": "alle Layer über + verbinden\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen pro Pflanze\")+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#plotsymbol-shape",
    "href": "Themen/03/03_Graph.html#plotsymbol-shape",
    "title": "Grafische Darstellungen",
    "section": "Plotsymbol shape",
    "text": "Plotsymbol shape\nDurch das Argument shape= in der Funktion geom_point() können die Plotsymbole geändert werden. Folgende Symbole werden durch die Zahlen 0 bis 24 abgebildet.\n\n\n\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=1)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#plotsymbol-entsprechend-variety",
    "href": "Themen/03/03_Graph.html#plotsymbol-entsprechend-variety",
    "title": "Grafische Darstellungen",
    "section": "Plotsymbol entsprechend variety",
    "text": "Plotsymbol entsprechend variety\n\nggplot(data=pot, aes(x=weight, y=tubers, shape=variety)) +\n  geom_point()"
  },
  {
    "objectID": "Themen/03/03_Graph.html#plotsymbole-manuel-festlegen",
    "href": "Themen/03/03_Graph.html#plotsymbole-manuel-festlegen",
    "title": "Grafische Darstellungen",
    "section": "Plotsymbole manuel festlegen",
    "text": "Plotsymbole manuel festlegen\nMit scale_shape_manual(values=c(1,2,3)) kann man manuell die Plotsymbole verändern, wobei die Werte 1, 2 und 3 dann für die 3 Sorten stehen. Hier kann man ganze Zahlen von 0 bis 24 wählen (siehe Abbildung zu den Plotsymbolen weiter oben). Wichtig ist nur, dass die Anzahl der Zahlen mit der Anzahl der unterschiedlichen Sorten übereinstimmt.\n\nggplot(data=pot, aes(x=weight, y=tubers, shape=variety)) +\n  geom_point()+\n  scale_shape_manual(values=c(1,2,3))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#größe-des-plotsymbols-size",
    "href": "Themen/03/03_Graph.html#größe-des-plotsymbols-size",
    "title": "Grafische Darstellungen",
    "section": "Größe des Plotsymbols size",
    "text": "Größe des Plotsymbols size\nsize=3 je höher die Zahl, desto größer die Symbole\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=2, size=3)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#farbe-des-plotsymbols-col",
    "href": "Themen/03/03_Graph.html#farbe-des-plotsymbols-col",
    "title": "Grafische Darstellungen",
    "section": "Farbe des Plotsymbols col",
    "text": "Farbe des Plotsymbols col\n\n\n\n\n\nMit col=3 werden die Symbole grün dargestellt. Farben kann man durch die Zahlen 1 bis 7 wählen oder benennen z.B. “green”, “darkgreen”, “red”. Alle möglichen Farben findet ihr mit der Funktion colors()oder auf http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n\nlibrary(scales)\nshow_col(colors()[1:100], ncol=10)\n\n\n\nshow_col(colors()[152:253], ncol=10)\n\n\n\nshow_col(pal_hue()(25))\n\n\n\nshow_col(pal_viridis()(25))\n\n\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=20, size=3, col=\"tan\")\n\n\n\n\nAuch RGB-Farben können gewählt werden. Hier ein Beispiel für das JKI blau:\n\nR: 35\nG: 80\nB: 150\n\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(shape=20, size=3, col=rgb(35,80,150, max = 255))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#die-farbe-des-plotsymbols-ensprechend-der-faktorausprägung-variety",
    "href": "Themen/03/03_Graph.html#die-farbe-des-plotsymbols-ensprechend-der-faktorausprägung-variety",
    "title": "Grafische Darstellungen",
    "section": "Die Farbe des Plotsymbols ensprechend der Faktorausprägung variety",
    "text": "Die Farbe des Plotsymbols ensprechend der Faktorausprägung variety\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()\n\n\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(\"royalblue\", \"orange\", \"olivedrab\"))\n\n\n\n\nDie Sorten entsprechend JKI-Farbwelt.\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(rgb(190,210,35, max = 255), \n                              rgb(35,80,150, max = 255), \n                              rgb(240,215,35, max = 255)))\n\n\n\n\nWenn keine Zuordnung der Werte zu den Farben erfolgt, dann werden die Farben entsprechend der Reihenfolge der Faktorlevels abgebildet (alphanumerisch).\nHier ein Beispiel mit Zuordnung.\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  scale_color_manual(values=c(\"Mariva\"=rgb(190,210,35, max = 255), \n                              \"Unica\"=rgb(35,80,150, max = 255), \n                              \"Costanera\"=rgb(240,215,35, max = 255)))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#ein-plot-für-jede-sorte-facet_grid-und-facet_wrap",
    "href": "Themen/03/03_Graph.html#ein-plot-für-jede-sorte-facet_grid-und-facet_wrap",
    "title": "Grafische Darstellungen",
    "section": "ein Plot für jede Sorte facet_grid() und facet_wrap()",
    "text": "ein Plot für jede Sorte facet_grid() und facet_wrap()\nMit der Funktion + facet_grid(~ variety) oder + facet_wrap(~ variety) wird ein separater Plot für jedes Gruppierungslevel der variety erzeugt.\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_grid(~variety)\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_wrap(~variety)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#ein-plot-für-jede-sorte-und-mit-und-ohne-befall-infection",
    "href": "Themen/03/03_Graph.html#ein-plot-für-jede-sorte-und-mit-und-ohne-befall-infection",
    "title": "Grafische Darstellungen",
    "section": "Ein Plot für jede Sorte und mit und ohne Befall (Infection)",
    "text": "Ein Plot für jede Sorte und mit und ohne Befall (Infection)\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_grid(infection~variety)\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  facet_wrap(infection~variety, labeller = labeller(.multi_line = FALSE))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#regressionslinien-einzeichnen",
    "href": "Themen/03/03_Graph.html#regressionslinien-einzeichnen",
    "title": "Grafische Darstellungen",
    "section": "Regressionslinien einzeichnen",
    "text": "Regressionslinien einzeichnen\nIm Folgenden sehen wir Beispiele für unterschiedliche Modellfits. Diese dienen nur der Veranschaulichung und ersetzen nicht die statistischen Analysen mit Modelldiagnostik.\n\nLM fit (lineare Regression)\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nLM fit ohne Konfidenzintervall\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nPolynomial zweiten Grades y= x + x²\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, formula=y ~ poly(x, 2)) # formula=y ~ x+I(x^2)\n\n\n\n\n\n\nPolynomial dritten Grades y= x + x² + x³\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=lm, formula=y ~ poly(x, 3)) # formula=y ~ x+I(x^2)+I(x^3)\n\n\n\n\n\n\nGLM fit\nWer sich über Generalsierte Lineare Modelle informieren möchte, kann im Intranet unter http://intranet.julius-kuehn.de/forschungservice/biometrie das Skript Generalisierte Lineare Modelle in R finden.\n\nZähldaten: Poisson\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=glm, method.args = list(family = \"poisson\"))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nZähldaten: Quasipoisson\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=glm, method.args = list(family = \"quasipoisson\"))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nZähldaten: Negativbinomial\n\nlibrary(MASS)\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  geom_smooth(method=\"glm.nb\")\n\n\n\n\n\n\nStreng positive kontinuierliche Daten: Gamma\n\npot1=pot[pot$weight&gt;0,]\nggplot(data=pot1, aes(x=tubers, y=weight)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = Gamma(link = log)))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\npresence/absence: binomial\nWir plotten die Beziehung zwischen Infektion und Luftfeuchtigkeit (humidity).\nBeispiele mit unterschiedlichen Links (logit, probit und cloglog)\n\n#logit\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#probit\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial(link = probit)))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#cloglog\nggplot(data=pot, aes(x=humidity, y=infection)) +\n  geom_point()+\n  geom_smooth(method=\"glm\", method.args = list(family = binomial(link = cloglog)))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nModellfit für verschiedene Sorten\n\nggplot(data=pot, aes(x=weight, y=tubers, colour=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nund hier ein Modelfit ohne Berücksichtigung der farblich unterschiedlichen Sorten\n\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point(aes(colour=variety))+\n  geom_smooth(method=lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=pot, \n       aes(x=weight, y=tubers, colour=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nggplot(data=pot, \n       aes(x=weight, y=tubers)) +\n  geom_point(aes(colour=variety))+\n  geom_smooth(method=lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=pot, aes(x=weight, y=tubers, colour=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  facet_grid(~variety)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Themen/03/03_Graph.html#mögliche-abbildung-der-daten",
    "href": "Themen/03/03_Graph.html#mögliche-abbildung-der-daten",
    "title": "Grafische Darstellungen",
    "section": "mögliche Abbildung der Daten",
    "text": "mögliche Abbildung der Daten\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  geom_smooth(method=lm)+\n  labs(x=\"Gewicht in g\", y=\"Anzahl Kartoffelknollen\")+\n  coord_cartesian(ylim=c(0,15), xlim = c(0,350))+\n  facet_grid(method~variety)+\n  theme(legend.position=\"bottom\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Themen/03/03_Graph.html#jittered-boxplot",
    "href": "Themen/03/03_Graph.html#jittered-boxplot",
    "title": "Grafische Darstellungen",
    "section": "jittered Boxplot",
    "text": "jittered Boxplot\nBei einem jittered Boxplot werden die Messwerte zusätzlich über den Boxplot geplottet. Das gibt dem Betrachter ein umfangreicheres Verständnis über die Daten. Um eine überlappung der Daten zu verhindern, wird für jeden Messwert eine kleine Zufallszahl in x-Richtung (width=0.25) gezogen. Natürlich werden die Werte nicht in der y-Richtung verändert (height=0). Um mögliche Ausreißer nicht doppelt abzubilden, muss das Argument outlier.shape=NA in der Funktion geom_boxplot() gesetzt werden.\nPallmann & Hothorn 2015: Boxplots for grouped and clustered data in toxicology. Archives of Toxicology. DOI 10.1007/s00204-015-1608-4\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#zusätzliche-stats",
    "href": "Themen/03/03_Graph.html#zusätzliche-stats",
    "title": "Grafische Darstellungen",
    "section": "zusätzliche Stats",
    "text": "zusätzliche Stats\n\nMittelwert\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)+\n  stat_summary(fun = \"mean\", colour = \"red\", size = 2, geom = \"point\") # Mittelwert\n\n\n\n\n\n\nbootstrapped Konfidenzintervall\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, height=0, shape=1)+\n  stat_summary(fun.data = \"mean_cl_boot\", colour = \"red\", size = 0.5)\n\n\n\n\n\n\nStichprobenumfang bzw. Anzahl Wiederholungen je Gruppe\nhttps://stackoverflow.com/questions/42822273/adding-sample-size-to-a-box-plot-at-the-min-or-max-of-the-facet-in-ggplot\n\ngive.n&lt;-function(x)\n  {\n  return(c(y = 300, label = length(x))) # y ggfls. anpassen \n  }\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+\n  stat_summary(fun = \"mean\", colour = \"red\", size = 2, geom = \"point\")+ # Mittelwert\n  stat_summary(fun.data = give.n, geom=\"text\", colour=2)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#weight-method-und-variety",
    "href": "Themen/03/03_Graph.html#weight-method-und-variety",
    "title": "Grafische Darstellungen",
    "section": "weight ~ method und variety",
    "text": "weight ~ method und variety\n\n# 1)\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  geom_boxplot() \n\n\n\n# 2) \nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() \n\n\n\n\n\n# 3) \nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot() +\n  facet_grid(~variety)\n\n\n\n\nIn diesem Beispiel ist die Beschriftung der x-Achsenlevels sehr lang. Mit \\n können wir einen Zeilenumbruch erzeugen:\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot() +\n  facet_grid(~variety)+\n  scale_x_discrete(labels =c(\"aero-\\nponic\", \"bed\", \"hydro-\\nponic\", \"pot\"))\n\n\n\n\n\nggplot(data=pot, aes(x=method, y=weight)) +\n  geom_boxplot() +\n  facet_grid(~variety)+\n  scale_x_discrete(labels =c(\"aero-\\nponic\", \"bed\", \"hydro-\\nponic\", \"pot\"))+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#jittered-boxplot-für-weight-method-und-weight",
    "href": "Themen/03/03_Graph.html#jittered-boxplot-für-weight-method-und-weight",
    "title": "Grafische Darstellungen",
    "section": "jittered boxplot für weight ~ method und weight",
    "text": "jittered boxplot für weight ~ method und weight\n\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(shape=1, size=1)\n\n\n\n\nNoch nicht ganz richtig. Die Punkte haben zwar unterschiedliche Farben, sind aber nicht den Boxen der Sorten zugeordnet.\nMit dem Argument position=position_jitterdodge() können wir das ändern:\n\nggplot(data=pot, aes(x=method, y=weight, colour=variety)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, dodge.width=0.75), \n              shape=1, size=1)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#transformation-der-achsenabstände",
    "href": "Themen/03/03_Graph.html#transformation-der-achsenabstände",
    "title": "Grafische Darstellungen",
    "section": "Transformation der Achsenabstände",
    "text": "Transformation der Achsenabstände\nHäufig weisen Daten eine (Rechts-) Schiefe auf, d.h. es gibt viele kleine und wenige große Werte. Dies ist bei Zähldaten häufig der Fall, die poisson oder negative binomial verteilt sein können oder bei streng positiven diskreten Daten, wie z.B. Biomasse, die gamma-verteilt sein kann. Dabei nimmt die Varianz (die Streuung) häufig mit steigendem Mittelwert zu.\nFür die Abbildung solcher Daten eignet sich eine Wurzel- oder Log-Transformation der Achsenabstände durch die die Funktion scale_y_sqrt() und scale_y_log10().\nFür die Wurzel-Transformation müssen die Werte &gt;= 0 sein:\n\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt()\n\n\n\n\nFür die logarithmische Skala müssen die Werte &gt; 0 sein.\n\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_log10()\n\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\nlog-10 transformation introduced infinite values.\n\n\nWarning: Removed 8 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\nRemoved 8 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\nIn diesem Datensatz sind Nullen enthalten und wir bekommen eine Warnmeldung, dass diese Werte nicht abgebildet werden. Hier hilft folgender Trick:\n\nwir addieren eine kleine Konstante y+1\nlabeln die Skala bei y+1 mit den Werten von y\nbenennen die Y-Achse name=\"weight\"\n\n\nggplot(data=pot, aes(x=method, y=weight+1))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_log10(breaks=c(0,3, 10,25, 50, 100,250, 500)+1,\n                label=c(0,3, 10, 25, 50, 100,250, 500),\n                lim=c(0,500)+1, name=\"weight\")\n\n\n\n\nAuch für die wurzeltransformierte Y-Achse können wir die Beschriftung der Achsenticks festlegen. Da wir keine Konstante addiert haben, werden die gleichen Informationen beim Argument breaks und label eingegeben:\n\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt(breaks=c(0,20, 50, 100, 200, 300), \n               label=c(0,20, 50, 100, 200, 300), \n               lim=c(0,400))\n\n\n\n\n\nggplot(data=pot, aes(x=method, y=weight))+ \n  stat_boxplot(geom =\"errorbar\", width = 0.5)+\n  geom_boxplot()+\n  scale_y_sqrt(breaks=seq(0,20, by=5)^2, \n               label=seq(0,20, by=5)^2,\n               lim=c(0,400))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#theme",
    "href": "Themen/03/03_Graph.html#theme",
    "title": "Grafische Darstellungen",
    "section": "Theme",
    "text": "Theme\nMit der Funktion `theme()´ können Gitterlinien, Beschriftungen, Legenden und vieles mehr angepasst werden. https://ggplot2.tidyverse.org/reference/theme.html\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(colour = \"red\", size = rel(1.5)),\n        legend.position=\"top\",\n        legend.title = element_text(colour=\"blue\", size=10, \n                                      face=\"bold\"))\n\n\n\n\nEs gibt eine Reihe von abgestimmten themes():\n\nwhite background - weißer Hintergrund\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  theme_bw()\n\n\n\n\n\n\nclassic\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  theme_classic()\n\n\n\n\n\n\npubr\n\nlibrary(ggpubr)\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  theme_pubr(base_size = 12, border = TRUE)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#farbwahl-für-fill-argument",
    "href": "Themen/03/03_Graph.html#farbwahl-für-fill-argument",
    "title": "Grafische Darstellungen",
    "section": "Farbwahl für fill-Argument",
    "text": "Farbwahl für fill-Argument\n\ngrey\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  scale_fill_grey() \n\n\n\n\n\n\nbrewer blau\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette=\"Blues\")"
  },
  {
    "objectID": "Themen/03/03_Graph.html#abstand-zwischen-den-boxen",
    "href": "Themen/03/03_Graph.html#abstand-zwischen-den-boxen",
    "title": "Grafische Darstellungen",
    "section": "Abstand zwischen den Boxen",
    "text": "Abstand zwischen den Boxen\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot(position=position_dodge(0.8)) \n\n\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot(position=position_dodge(1))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#achsen",
    "href": "Themen/03/03_Graph.html#achsen",
    "title": "Grafische Darstellungen",
    "section": "Achsen",
    "text": "Achsen\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot(position=position_dodge(0.85))+\n  scale_y_sqrt()\n\n\n\nggplot(data=pot, aes(x=method, y=weight, fill=variety)) +\n  geom_boxplot(position=position_dodge(0.85))+\n  scale_y_sqrt(limits=c(0,400))"
  },
  {
    "objectID": "Themen/03/03_Graph.html#mit-bins-und-binwidth-die-anzahl-der-balken-klassen-ändern",
    "href": "Themen/03/03_Graph.html#mit-bins-und-binwidth-die-anzahl-der-balken-klassen-ändern",
    "title": "Grafische Darstellungen",
    "section": "mit bins und binwidth die Anzahl der Balken (Klassen) ändern",
    "text": "mit bins und binwidth die Anzahl der Balken (Klassen) ändern\nWir können nun die Anzahl der Klassen mit dem Argument bins = 15 ändern, oder die Klassenbreite mit binwidth = 25 wählen.\n\nggplot(data=pot, aes(weight)) + \n  geom_histogram(bins = 15)\n\n\n\nggplot(data=pot, aes(weight)) + \n  geom_histogram(binwidth = 25)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#ein-histogramm-von-weight-für-die-sorten",
    "href": "Themen/03/03_Graph.html#ein-histogramm-von-weight-für-die-sorten",
    "title": "Grafische Darstellungen",
    "section": "ein Histogramm von weight für die Sorten",
    "text": "ein Histogramm von weight für die Sorten\nMit der Funktion + facet_wrap(~ variety) oder + facet_grid(~ variety) wird ein separater Plot (hier Histogramm) für jedes Gruppierungslevel der variety erzeugt.\n\nggplot(data=pot, aes(weight)) + \n  geom_histogram(binwidth = 25, col=1)+\n  facet_wrap(~ variety)"
  },
  {
    "objectID": "Themen/03/03_Graph.html#vier-plots-in-einer-graphik",
    "href": "Themen/03/03_Graph.html#vier-plots-in-einer-graphik",
    "title": "Grafische Darstellungen",
    "section": "Vier Plots in einer Graphik",
    "text": "Vier Plots in einer Graphik\nUm mehrere Plots in einer Graphik abzubilden, müssen die Plots zunächst einzeln in Objekten gespeichert werden (z.B. p1 bis p4), um dann mit der Funktion grid.arrange(p1,p2,p3,p4, ncol=2) der library(gridExtra) geplottet zu werden. Mit dem Argument ncol kann die Anzahl der Spalten bestimmt werden.\n\nlibrary(gridExtra)\n\n\nAttache Paket: 'gridExtra'\n\n\nDas folgende Objekt ist maskiert 'package:dplyr':\n\n    combine\n\np1=ggplot(data=pot, aes(weight, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)\n\np2=ggplot(data=pot, aes(x=method, y=weight, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)\n\np3=ggplot(data=pot, aes(tubers, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)\n\np4=ggplot(data=pot, aes(x=method, y=tubers, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)\n\ngrid.arrange(p1,p2,p3,p4, ncol=2)\n\n\n\n\nDas ist noch nicht wirklich schön. Die Legenden nehmen zu viel Platz ein. Alle Plots haben zudem die gleiche Legende. Diese Redundanz können wir entfernen, indem wir nur im ersten Plot eine Legende zeichnen und dabei diese durch das Argument theme(legend.position=c(0.8,0.7)) in den Plot zeichnen. Bei den anderen Plots unterdrücken wir durch theme(legend.position=\"none\") die Legende.\n\np1=ggplot(data=pot, aes(weight, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)+ \n  theme(legend.position=c(0.8,0.7)) #Legende innerhalb der Plotoberfläche\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\ni Please use the `legend.position.inside` argument of `theme()` instead.\n\np2=ggplot(data=pot, aes(x=method, y=weight, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+ \n  theme(legend.position=\"none\") #ohne Legende\n\np3=ggplot(data=pot, aes(tubers, colour=method, fill=method)) + \n  geom_density(adjust=.75, alpha=.2)+ \n  theme(legend.position=\"none\")\n\np4=ggplot(data=pot, aes(x=method, y=tubers, colour=method)) +\n  geom_boxplot(outlier.shape=NA) +\n  geom_jitter(width=0.25, shape=1)+ \n  theme(legend.position=\"none\")\n\ngrid.arrange(p1,p2,p3,p4, ncol=2)\n\n\n\n\nSchon besser."
  },
  {
    "objectID": "Themen/03/03_Graph.html#vier-plots-in-einer-graphik-mit-einer-legende-mit-libraryggpubr",
    "href": "Themen/03/03_Graph.html#vier-plots-in-einer-graphik-mit-einer-legende-mit-libraryggpubr",
    "title": "Grafische Darstellungen",
    "section": "Vier Plots in einer Graphik mit einer Legende mit library(ggpubr)",
    "text": "Vier Plots in einer Graphik mit einer Legende mit library(ggpubr)\nEine weitere Möglichkeit bietet die library(ggpubr) mit der Funktion ggarrange(). Hier können auch die einzelnen Plots z.B. mit A, B, C, D beschriftet werden.\n\nlibrary(ggpubr)\nggarrange(p1, p2, p3, p4, labels = c(\"a)\", \"b)\", \"c)\", \"d)\"), font.label = list(face=\"plain\"),\n          common.legend = TRUE, legend = \"bottom\")"
  },
  {
    "objectID": "Themen/03/03_Graph.html#beschriftung-innerhalb-facet_grid-und-facet_wrap",
    "href": "Themen/03/03_Graph.html#beschriftung-innerhalb-facet_grid-und-facet_wrap",
    "title": "Grafische Darstellungen",
    "section": "Beschriftung innerhalb facet_grid() und facet_wrap()",
    "text": "Beschriftung innerhalb facet_grid() und facet_wrap()\n\nlabeller = label_both\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety, labeller = label_both)+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n\nlabeller = labeller(variety = Sorten.labs)\n\nSorten.labs &lt;- c(\"a) Costanera\", \"b) Mariva\", \"c) Unica\")\nnames(Sorten.labs) &lt;- c(\"Costanera\", \"Mariva\" ,   \"Unica\" )\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety, labeller = labeller(variety = Sorten.labs))+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n\nBeschriftung im Plot\ndabei bilden x und y die Koordinaten im Plot\n\nabc=data.frame(label=c(\"a)\", \"b)\", \"c)\"), \n               x=c(20,20,20), y=c(13,13, 13),\n               variety=c(levels(pot$variety.f)))\nabc\n\n  label  x  y   variety\n1    a) 20 13 Costanera\n2    b) 20 13    Mariva\n3    c) 20 13     Unica\n\n\ndie Beschrifftung erfolgt dann über die Funktion geom_text()\n\nggplot(data=pot, aes(x=weight, y=tubers, color=variety)) +\n  geom_point()+\n  facet_grid(~variety)+\n  geom_text(data  = abc,\n            aes(x = x, y = y, label = label), col=1)+\n  theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "Themen/03/03_Graph.html#r-logo-im-plot",
    "href": "Themen/03/03_Graph.html#r-logo-im-plot",
    "title": "Grafische Darstellungen",
    "section": "R-Logo im Plot",
    "text": "R-Logo im Plot\n\nR_png &lt;- png::readPNG(\"R_logo.png\", native = TRUE)\nggplot(data=pot, aes(x=weight, y=tubers)) +\n  geom_point()+\n  patchwork::inset_element(p = R_png,\n                left = 0.01,\n                bottom = 0.8,\n                right = 0.15,\n                top = 0.99)"
  },
  {
<<<<<<< HEAD
=======
    "objectID": "Themen/02/02_DeskriptiveStats.html",
    "href": "Themen/02/02_DeskriptiveStats.html",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "",
    "text": "Diese Daten sind die leicht modifizierten und erweiterten greenhouse-Daten aus dem R-Paket agricolae.\nIn einem Versuch wurden verschiedene Kartoffelsorten (variety) in verschiedenen Anbaumethoden (method) kultiviert und die Anzahl Knollen (tubers), deren Gewicht (weight), der Krankheitsbefall (infection 1=ja, 0=nein) und die mittlere Luftfeuchte (humidity) ermittelt.\nZunächst lesen wir den Datensatz potato.xlsx mit der Funktion read.xlsx aus der library(openxlsx) ein und benennen den data.frame mit pot und machen uns mit ihm vertraut.\n\nlibrary(openxlsx)\npot&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(pot)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nDer Datensatz hat 478 Zeilen (Beobachtungen) und 7 Spalten.\nvariety undmethod sind als character eingelesen.\n\nunique(pot$variety)\n\n[1] \"Unica\"     \"Mariva\"    \"Costanera\"\n\nunique(pot$method)\n\n[1] \"pot\"        \"bed\"        \"hydroponic\" \"aeroponic\" \n\n\nDiese können wir auch in Faktoren umwandeln (siehe Section 2.2.3.1). Alle anderen Variablen sind numerisch."
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#zeilen",
    "href": "Themen/02/02_DeskriptiveStats.html#zeilen",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Zeilen",
    "text": "Zeilen\nWir lernen nun Funtionen aus dem paket dplyr kennen, mit denen wir Beobachtungen, d.h. Zeilen unseres Datensatzes, auswählen oder umsortieren können.\n\nfilter\nMit der Funktion filter können wir ein Subset des Datensatzes erstellen. pot.M enthält mit folgendem Code nur noch Beobachtungen der Sorte Mariva.\n\npot.M&lt;- pot.sub %&gt;% filter(variety==\"Mariva\")\npot.M\n\n# A tibble: 8 x 7\n# Groups:   variety, method [4]\n  variety method     plant tubers weight infection humidity\n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Mariva  aeroponic      7      6  99.2          0     31.8\n2 Mariva  aeroponic      5      5  72.6          0     24.5\n3 Mariva  bed            7      5  59.9          0     56.3\n4 Mariva  bed            8      5  77.3          0     16.3\n5 Mariva  hydroponic     9      2  10.8          0     44.6\n6 Mariva  hydroponic     9      1   7.85         0     48.5\n7 Mariva  pot            5      7 104.           0     41.4\n8 Mariva  pot            8      5  64.8          0     27.3\n\n\npot.BM enthält mit folgendem Code nur noch Beobachtungen der Sorte Mariva und Methode bed.\n\npot.MB&lt;- pot.sub %&gt;% filter(variety==\"Mariva\", method==\"bed\")\npot.MB  \n\n# A tibble: 2 x 7\n# Groups:   variety, method [1]\n  variety method plant tubers weight infection humidity\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Mariva  bed        7      5   59.9         0     56.3\n2 Mariva  bed        8      5   77.3         0     16.3\n\n\nMehrere Ausprägungen einer Variable können mit %in% ausgewählt werden: pot.MU enthält mit folgendem Code nur noch Beobachtungen der Sorten Mariva und Unica.\n\npot.MU&lt;- pot.sub %&gt;% filter(variety%in%c(\"Mariva\", \"Unica\"))\npot.MU\n\n# A tibble: 16 x 7\n# Groups:   variety, method [8]\n   variety method     plant tubers weight infection humidity\n   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Mariva  aeroponic      7      6  99.2          0     31.8\n 2 Mariva  aeroponic      5      5  72.6          0     24.5\n 3 Mariva  bed            7      5  59.9          0     56.3\n 4 Mariva  bed            8      5  77.3          0     16.3\n 5 Mariva  hydroponic     9      2  10.8          0     44.6\n 6 Mariva  hydroponic     9      1   7.85         0     48.5\n 7 Mariva  pot            5      7 104.           0     41.4\n 8 Mariva  pot            8      5  64.8          0     27.3\n 9 Unica   aeroponic      6      2 112.           0     27.5\n10 Unica   aeroponic      7      4  50.1          0     40.0\n11 Unica   bed            9      4 124.           0     41.8\n12 Unica   bed            9      3  38            0     56.8\n13 Unica   hydroponic     6      2  17.1          0     50.2\n14 Unica   hydroponic     4      2  21.8          0     14.3\n15 Unica   pot            7      4  50.4          0     36.0\n16 Unica   pot            9      5  97.7          1     58.7\n\n\nAlternativ können alle Beobachtungen bis auf Sorte Mariva selektiert werden.\n\npot.oM&lt;- pot.sub %&gt;% filter(variety!=(\"Mariva\"))\npot.oM \n\n# A tibble: 16 x 7\n# Groups:   variety, method [8]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            5      3  110.          0     26.6\n 8 Costanera pot            6      7  139.          0     41.6\n 9 Unica     aeroponic      6      2  112.          0     27.5\n10 Unica     aeroponic      7      4   50.1         0     40.0\n11 Unica     bed            9      4  124.          0     41.8\n12 Unica     bed            9      3   38           0     56.8\n13 Unica     hydroponic     6      2   17.1         0     50.2\n14 Unica     hydroponic     4      2   21.8         0     14.3\n15 Unica     pot            7      4   50.4         0     36.0\n16 Unica     pot            9      5   97.7         1     58.7\n\n\nHier werden alle Beobachtungen mit größer gleich 5 Knollen selektiert.\n\npot.T5 &lt;-pot.sub %&gt;% filter(tubers&gt;=5)\npot.T5\n\n# A tibble: 14 x 7\n# Groups:   variety, method [8]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            6      7  139.          0     41.6\n 8 Mariva    aeroponic      7      6   99.2         0     31.8\n 9 Mariva    aeroponic      5      5   72.6         0     24.5\n10 Mariva    bed            7      5   59.9         0     56.3\n11 Mariva    bed            8      5   77.3         0     16.3\n12 Mariva    pot            5      7  104.          0     41.4\n13 Mariva    pot            8      5   64.8         0     27.3\n14 Unica     pot            9      5   97.7         1     58.7\n\npot.T5$tubers\n\n [1] 5 7 7 5 6 5 7 6 5 5 5 7 5 5\n\n\nHier werden alle Beobachtungen mit mehr als 5 Knollen selektiert.\n\npot.T5 &lt;-pot.sub %&gt;% filter(tubers&gt;5)\npot.T5\n\n# A tibble: 6 x 7\n# Groups:   variety, method [6]\n  variety   method     plant tubers weight infection humidity\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Costanera aeroponic      5      7   42           0     26.0\n2 Costanera bed            4      7  137.          1     41.6\n3 Costanera hydroponic     8      6   31.8         1     57.2\n4 Costanera pot            6      7  139.          0     41.6\n5 Mariva    aeroponic      7      6   99.2         0     31.8\n6 Mariva    pot            5      7  104.          0     41.4\n\npot.T5$tubers\n\n[1] 7 7 6 7 6 7\n\n\nzwei Bedingungen (Anzahl Knollen und Gewicht)\n\npot.sub %&gt;% filter(tubers&gt;=5, weight &gt; 80)\n\n# A tibble: 5 x 7\n# Groups:   variety, method [5]\n  variety   method    plant tubers weight infection humidity\n  &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Costanera bed           4      7  137.          1     41.6\n2 Costanera pot           6      7  139.          0     41.6\n3 Mariva    aeroponic     7      6   99.2         0     31.8\n4 Mariva    pot           5      7  104.          0     41.4\n5 Unica     pot           9      5   97.7         1     58.7\n\n\n\n\narrange\nMit der Funktion arrange sortieren wir die Daten. Hier nach Anzahl tubers in aufsteigender Reihenfolge.\n\npot.sub %&gt;% arrange(tubers)\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Mariva    hydroponic     9      1   7.85         0     48.5\n 2 Mariva    hydroponic     9      2  10.8          0     44.6\n 3 Unica     aeroponic      6      2 112.           0     27.5\n 4 Unica     hydroponic     6      2  17.1          0     50.2\n 5 Unica     hydroponic     4      2  21.8          0     14.3\n 6 Costanera pot            5      3 110.           0     26.6\n 7 Unica     bed            9      3  38            0     56.8\n 8 Unica     aeroponic      7      4  50.1          0     40.0\n 9 Unica     bed            9      4 124.           0     41.8\n10 Unica     pot            7      4  50.4          0     36.0\n# i 14 more rows\n\n\nund hier in absteigender Reihenfolge durch Funktion desc():\n\npot.sub %&gt;% arrange(desc(tubers))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      5      7   42           0     26.0\n 2 Costanera bed            4      7  137.          1     41.6\n 3 Costanera pot            6      7  139.          0     41.6\n 4 Mariva    pot            5      7  104.          0     41.4\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Mariva    aeroponic      7      6   99.2         0     31.8\n 7 Costanera aeroponic      1      5   24.1         0     33.9\n 8 Costanera bed            3      5   78           1     51.0\n 9 Costanera hydroponic     4      5   42           1     56.8\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\nund hier für zwei Kriterien (wobei letzteres Kriterium nur bei gleichen Werten in erstem Kriterium sortiert wird)\n\npot.sub %&gt;% arrange(desc(tubers),desc(weight))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera pot            6      7  139.          0     41.6\n 2 Costanera bed            4      7  137.          1     41.6\n 3 Mariva    pot            5      7  104.          0     41.4\n 4 Costanera aeroponic      5      7   42           0     26.0\n 5 Mariva    aeroponic      7      6   99.2         0     31.8\n 6 Costanera hydroponic     8      6   31.8         1     57.2\n 7 Unica     pot            9      5   97.7         1     58.7\n 8 Costanera bed            3      5   78           1     51.0\n 9 Mariva    bed            8      5   77.3         0     16.3\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\n\nslice\nMit der Funktion slice selektieren wir die Zeilen. Hier Zeile 5 bis 10 im Datensatz pot.\n\npot %&gt;% slice(5:10)\n\n  variety method plant tubers weight infection humidity\n1   Unica    pot     5      2   11.3         1 49.62655\n2   Unica    pot     6      2   17.8         0 54.42449\n3   Unica    pot     7      3   28.1         0 38.82654\n4   Unica    pot     8      6   33.0         0 17.36043\n5   Unica    pot     9      9   81.5         0 24.55165\n6   Unica    pot    10      6   71.1         0 27.55136\n\n\nDie Funktion slice_head(n=3) zeigt die ersten drei Zeilen des Datensatzes an.\n\npot %&gt;% slice_head(n=3)\n\n  variety method plant tubers weight infection humidity\n1   Unica    pot     1      9  209.9         0 26.12342\n2   Unica    pot     2      3  248.4         0 30.23136\n3   Unica    pot     3      4   53.6         0 52.47987\n\n\nDie Funktion slice_tail(n=3) zeigt die letzten drei Zeilen des Datensatzes an.\n\npot %&gt;% slice_tail(n=3)\n\n    variety    method plant tubers weight infection humidity\n1 Costanera aeroponic     8      6   29.1         1 49.90505\n2 Costanera aeroponic     9      4   17.6         0 54.39016\n3 Costanera aeroponic    10      7   36.9         0 29.03782\n\n\nAlternativ könnte man auch die Funtionen head(pot) und tail(pot) nutzen.\nDie Funktion slice_sample(n=3) wählt zufällig drei Beobachtungen aus.\n\npot %&gt;% slice_sample(n=3)\n\n    variety     method plant tubers weight infection humidity\n1     Unica        bed     3      2   18.2         1 42.24794\n2 Costanera        bed     2      4  118.5         1 33.23794\n3     Unica hydroponic     3      2   58.7         0 13.54122\n\n\nWenn man immer das gleiche Set an Proben zufällig auswählen möchte, d.h. ein reproduzierbares Ergebnis erzielen möchte, dann setzt man vorher den seed. Die Zahl (hier 123) kann beliebig gewählt werden.\n\nset.seed(123)\npot %&gt;% slice_sample(n=3)\n\n    variety     method plant tubers weight infection humidity\n1    Mariva        bed     5      3   37.8         1 42.87366\n2 Costanera hydroponic     3      7   18.6         1 54.46725\n3    Mariva        bed     9      6   99.4         0 38.52317\n\n\nDie Funktion slice_max(n=3) wählt die drei Beobachtungen mit dem höchsten Gewicht aus.\n\npot %&gt;% slice_max(weight, n=3)\n\n  variety    method plant tubers weight infection humidity\n1  Mariva aeroponic     6     13  323.3         0 45.84920\n2   Unica aeroponic     9      5  265.4         0 17.41489\n3   Unica       pot     2      3  248.4         0 30.23136"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#spalten",
    "href": "Themen/02/02_DeskriptiveStats.html#spalten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Spalten",
    "text": "Spalten\nHäufig arbeitet man mit großen Datensätzen und vielen Variablen.\n\nselect\nMit der Funktion select kann man Variablen auswählen, indem ich sie durch Komme getrennt aufliste:\n\npot.sub %&gt;% select(variety, method, tubers, weight)\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n\noder von variety bis weight\n\npot.sub %&gt;% select(variety:weight)\n\n# A tibble: 24 x 5\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1\n 2 Costanera aeroponic      5      7   42  \n 3 Costanera bed            4      7  137. \n 4 Costanera bed            3      5   78  \n 5 Costanera hydroponic     8      6   31.8\n 6 Costanera hydroponic     4      5   42  \n 7 Costanera pot            5      3  110. \n 8 Costanera pot            6      7  139. \n 9 Mariva    aeroponic      7      6   99.2\n10 Mariva    aeroponic      5      5   72.6\n# i 14 more rows\n\n\nwie oben nur ohne plant\n\npot.sub %&gt;% \n  select(variety:weight)%&gt;% \n  select(-plant)\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n# oder so\npot.sub %&gt;% \n  select(c(variety:weight,-plant))\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n# aber nicht so\npot.sub %&gt;% \n  select(c(-plant, variety:weight))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     tubers weight infection humidity plant\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1         0     33.9     1\n 2 Costanera aeroponic       7   42           0     26.0     5\n 3 Costanera bed             7  137.          1     41.6     4\n 4 Costanera bed             5   78           1     51.0     3\n 5 Costanera hydroponic      6   31.8         1     57.2     8\n 6 Costanera hydroponic      5   42           1     56.8     4\n 7 Costanera pot             3  110.          0     26.6     5\n 8 Costanera pot             7  139.          0     41.6     6\n 9 Mariva    aeroponic       6   99.2         0     31.8     7\n10 Mariva    aeroponic       5   72.6         0     24.5     5\n# i 14 more rows\n\n\n\npot.sub %&gt;% \n  select(ends_with(\"t\")) \n\nAdding missing grouping variables: `variety`, `method`\n\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     plant weight\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic      1   24.1\n 2 Costanera aeroponic      5   42  \n 3 Costanera bed            4  137. \n 4 Costanera bed            3   78  \n 5 Costanera hydroponic     8   31.8\n 6 Costanera hydroponic     4   42  \n 7 Costanera pot            5  110. \n 8 Costanera pot            6  139. \n 9 Mariva    aeroponic      7   99.2\n10 Mariva    aeroponic      5   72.6\n# i 14 more rows\n\n\n\npot %&gt;% \n  select(ends_with(\"t\")) %&gt;% \n  slice_sample(n=8)\n\n  plant weight\n1     4  65.60\n2     5  78.30\n3     6  10.35\n4     6  14.15\n5     8  43.30\n6     9  34.10\n7     9  16.70\n8     4 142.80\n\n\n\n\nrename\nVariablen können umbenannt werden durch die Funktion rename().\n\npot.sub %&gt;% rename(plant_ID=plant)\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant_ID tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic         1      5   24.1         0     33.9\n 2 Costanera aeroponic         5      7   42           0     26.0\n 3 Costanera bed               4      7  137.          1     41.6\n 4 Costanera bed               3      5   78           1     51.0\n 5 Costanera hydroponic        8      6   31.8         1     57.2\n 6 Costanera hydroponic        4      5   42           1     56.8\n 7 Costanera pot               5      3  110.          0     26.6\n 8 Costanera pot               6      7  139.          0     41.6\n 9 Mariva    aeroponic         7      6   99.2         0     31.8\n10 Mariva    aeroponic         5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\npot.sub\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            5      3  110.          0     26.6\n 8 Costanera pot            6      7  139.          0     41.6\n 9 Mariva    aeroponic      7      6   99.2         0     31.8\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\nAuch hier müssen wir die Daten in einem neuen data.frame pot.sub1 speichern oder überschreiben (pot.sub=pot.sub %&gt;% rename(plant_ID=plant)), um auf die neue Variable zugreifen zu können.\n\npot.sub1=pot.sub %&gt;% rename(plant_ID=plant)\npot.sub1\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant_ID tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic         1      5   24.1         0     33.9\n 2 Costanera aeroponic         5      7   42           0     26.0\n 3 Costanera bed               4      7  137.          1     41.6\n 4 Costanera bed               3      5   78           1     51.0\n 5 Costanera hydroponic        8      6   31.8         1     57.2\n 6 Costanera hydroponic        4      5   42           1     56.8\n 7 Costanera pot               5      3  110.          0     26.6\n 8 Costanera pot               6      7  139.          0     41.6\n 9 Mariva    aeroponic         7      6   99.2         0     31.8\n10 Mariva    aeroponic         5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\n\nmutate\nEine neue Variable kann durch die Funktion mutate berechnet und eingefügt werden.\nBeispielsweise könnten wir das Gewicht in kg statt g angeben. Es wird eine neue Variable erzeugt weight_kg indem weight durch 1000 geteilt wird.\n\npot.sub %&gt;% \n  mutate(weight_kg=weight/1000)\n\n# A tibble: 24 x 8\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity weight_kg\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9    0.0241\n 2 Costanera aeroponic      5      7   42           0     26.0    0.042 \n 3 Costanera bed            4      7  137.          1     41.6    0.137 \n 4 Costanera bed            3      5   78           1     51.0    0.078 \n 5 Costanera hydroponic     8      6   31.8         1     57.2    0.0318\n 6 Costanera hydroponic     4      5   42           1     56.8    0.042 \n 7 Costanera pot            5      3  110.          0     26.6    0.110 \n 8 Costanera pot            6      7  139.          0     41.6    0.139 \n 9 Mariva    aeroponic      7      6   99.2         0     31.8    0.0992\n10 Mariva    aeroponic      5      5   72.6         0     24.5    0.0726\n# i 14 more rows\n\n\nDamit diese neue Variable im Datensatz nicht nur erscheint, sondern auch zugreifbar ist, speichere ich den Datensatz unter einem neuen Namen ab. Man könnte ihn auch überschreiben. Ausserdem noch zwei Beispiele für eine log- und Wurzel-Transformation.\n\npot.sub1=pot.sub %&gt;% \n  mutate(weight_kg=weight/1000,\n         weight.sqrt=sqrt(weight),\n         weight.l=log(weight),\n         tubers.l=log(tubers))\npot.sub1\n\n# A tibble: 24 x 11\n# Groups:   variety, method [12]\n   variety   method plant tubers weight infection humidity weight_kg weight.sqrt\n   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Costanera aerop~     1      5   24.1         0     33.9    0.0241        4.91\n 2 Costanera aerop~     5      7   42           0     26.0    0.042         6.48\n 3 Costanera bed        4      7  137.          1     41.6    0.137        11.7 \n 4 Costanera bed        3      5   78           1     51.0    0.078         8.83\n 5 Costanera hydro~     8      6   31.8         1     57.2    0.0318        5.64\n 6 Costanera hydro~     4      5   42           1     56.8    0.042         6.48\n 7 Costanera pot        5      3  110.          0     26.6    0.110        10.5 \n 8 Costanera pot        6      7  139.          0     41.6    0.139        11.8 \n 9 Mariva    aerop~     7      6   99.2         0     31.8    0.0992        9.96\n10 Mariva    aerop~     5      5   72.6         0     24.5    0.0726        8.52\n# i 14 more rows\n# i 2 more variables: weight.l &lt;dbl&gt;, tubers.l &lt;dbl&gt;\n\n\n\nVariable in Faktor umwandeln\nBeim Importieren von Daten werden Variablen häufig als character eingelesen (oder als numeric), die für die spätere Analyse aber als Faktor benötigt werden. Wir können diese Variablen in Faktoren umwandeln, können diese überschreiben oder (wie unten gezeigt) geben ihnen einen neuen Namen mit dem Appendix “.f”.\n\npot=pot %&gt;% \n    mutate(variety.f=as.factor(variety),\n           method.f=as.factor(method),\n           infection.f=as.factor(infection))\n\nalternativer Code zu oben:\n\npot$variety.f=as.factor(pot$variety)\npot$method.f=as.factor(pot$method)\npot$infection.f=as.factor(pot$infection)\nstr(pot)\n\nMit across(where(is.character),as.factor) werden alle Variablen, die als Charakter eingelesen sind, in einen Faktor umgewandelt.\n\npot2&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(pot2)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\npot3&lt;- pot2 %&gt;% mutate(across(where(is.character),as.factor))\nstr(pot3)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nBitte beachten, dass infection damit nicht als Faktor umgewandelt wird, da es als numerische Variable eingelesen wurde. Wir müssen also immer nochmal die Struktur überprüfen und ggfls. nachjustieren.\n\npot4&lt;- pot2 %&gt;% mutate(across(where(is.character),as.factor),\n                       infection=as.factor(infection))\nstr(pot4)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 1 1 1 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nDer große Vorteil von dplyr ist, dass ihr alle Schritte in einen Code schreiben und ihn damit gut nachvollziehen könnt.\n\npot1=pot%&gt;% \n  filter(variety==c(\"Mariva\", \"Costanera\"), tubers&gt;7) %&gt;% \n  mutate(weight_kg=weight/1000, \n         variety.f=as.factor(variety),\n         method.f=as.factor(method),\n         infection.f=as.factor(infection)) %&gt;% \n  select(!c(plant,infection, weight))\npot1\n\n     variety     method tubers humidity variety.f   method.f infection.f\n1     Mariva        bed      9 36.24464    Mariva        bed           0\n2     Mariva        bed     10 13.83214    Mariva        bed           0\n3     Mariva        bed      8 34.63448    Mariva        bed           0\n4  Costanera        pot      8 62.30639 Costanera        pot           1\n5  Costanera hydroponic      8 51.21347 Costanera hydroponic           1\n6  Costanera  aeroponic      9 40.65539 Costanera  aeroponic           0\n7     Mariva        pot     10 27.90961    Mariva        pot           0\n8     Mariva  aeroponic      8 55.48964    Mariva  aeroponic           1\n9  Costanera        pot      8 27.17098 Costanera        pot           0\n10 Costanera        pot      9 25.69880 Costanera        pot           0\n11    Mariva        bed     11 47.62537    Mariva        bed           0\n12    Mariva        bed      8 62.26231    Mariva        bed           1\n13    Mariva  aeroponic     10 28.71567    Mariva  aeroponic           0\n14    Mariva  aeroponic      8 54.04355    Mariva  aeroponic           0\n15    Mariva        pot     10 26.39289    Mariva        pot           0\n16    Mariva        bed     10 54.14047    Mariva        bed           1\n17    Mariva        bed      8 56.14320    Mariva        bed           1\n18    Mariva        bed     10 39.75289    Mariva        bed           0\n19    Mariva  aeroponic      9 30.72462    Mariva  aeroponic           0\n20    Mariva  aeroponic      8 36.82570    Mariva  aeroponic           0\n21 Costanera        pot      8 44.07980 Costanera        pot           0\n22 Costanera        bed      8 61.03558 Costanera        bed           1\n23 Costanera hydroponic      8 69.46336 Costanera hydroponic           1\n   weight_kg\n1     0.2274\n2     0.0338\n3     0.0948\n4     0.1624\n5     0.0486\n6     0.0781\n7     0.0773\n8     0.1205\n9     0.1449\n10    0.1391\n11    0.1182\n12    0.1250\n13    0.1883\n14    0.1656\n15    0.0644\n16    0.1069\n17    0.1332\n18    0.1183\n19    0.0759\n20    0.1684\n21    0.1531\n22    0.0494\n23    0.0253"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#qualitative-daten",
    "href": "Themen/02/02_DeskriptiveStats.html#qualitative-daten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Qualitative Daten",
    "text": "Qualitative Daten\nQualitative Variablen sind in unserem Beispiel die Sorte, der Krankheitsbefall und die Methode. Diese Daten beschreiben wir durch Häufigkeitstabellen (Kontingenztabellen), die angeben, wie häufig eine Merkmalsausprägung bzw. -kombination in unserem Datensatz vorkommt. Wir nutzen die Funktion count()aus dem Package dplyr\n\npot %&gt;% count(variety)\n\n    variety   n\n1 Costanera 158\n2    Mariva 160\n3     Unica 160\n\n\noder die Funktion table().\n\ntable(pot$variety) \n\n\nCostanera    Mariva     Unica \n      158       160       160 \n\n\nDie Funktion prop.table() berechnet uns die relativen Anteile jeder Merkmalsausprägung bzw. -kombination.\n\npot %&gt;% count(variety) %&gt;% \n  mutate(prop = prop.table(n))\n\n    variety   n      prop\n1 Costanera 158 0.3305439\n2    Mariva 160 0.3347280\n3     Unica 160 0.3347280\n\n\n\nprop.table(table(pot$variety)) # relativ, i.e. Anteil der Beobachtungen an der Gesamtzahl der Beobachtungen \n\n\nCostanera    Mariva     Unica \n0.3305439 0.3347280 0.3347280 \n\n\nHäufigkeitstabellen können für 2 Kombinationen (Merkmale) erstellt werden, indem man beide Variablen in der Funktion count() oder table() angibt.\n\npot %&gt;% count(variety, infection) %&gt;% \n  mutate(prop = prop.table(n))\n\n    variety infection   n       prop\n1 Costanera         0  77 0.16108787\n2 Costanera         1  81 0.16945607\n3    Mariva         0 119 0.24895397\n4    Mariva         1  41 0.08577406\n5     Unica         0 122 0.25523013\n6     Unica         1  38 0.07949791\n\n\n\ntable(pot$variety, pot$infection)\n\n           \n              0   1\n  Costanera  77  81\n  Mariva    119  41\n  Unica     122  38\n\nprop.table(table(pot$variety, pot$infection)) # relative Häufigkeit\n\n           \n                     0          1\n  Costanera 0.16108787 0.16945607\n  Mariva    0.24895397 0.08577406\n  Unica     0.25523013 0.07949791\n\n\nHäufigkeitstabelle für 3 Kombinationen\n\npot %&gt;% count(variety, method, infection) %&gt;% \n  mutate(prop = prop.table(n))\n\n     variety     method infection  n       prop\n1  Costanera  aeroponic         0 28 0.05857741\n2  Costanera  aeroponic         1 12 0.02510460\n3  Costanera        bed         0  9 0.01882845\n4  Costanera        bed         1 31 0.06485356\n5  Costanera hydroponic         0 11 0.02301255\n6  Costanera hydroponic         1 27 0.05648536\n7  Costanera        pot         0 29 0.06066946\n8  Costanera        pot         1 11 0.02301255\n9     Mariva  aeroponic         0 27 0.05648536\n10    Mariva  aeroponic         1 13 0.02719665\n11    Mariva        bed         0 29 0.06066946\n12    Mariva        bed         1 11 0.02301255\n13    Mariva hydroponic         0 31 0.06485356\n14    Mariva hydroponic         1  9 0.01882845\n15    Mariva        pot         0 32 0.06694561\n16    Mariva        pot         1  8 0.01673640\n17     Unica  aeroponic         0 30 0.06276151\n18     Unica  aeroponic         1 10 0.02092050\n19     Unica        bed         0 31 0.06485356\n20     Unica        bed         1  9 0.01882845\n21     Unica hydroponic         0 32 0.06694561\n22     Unica hydroponic         1  8 0.01673640\n23     Unica        pot         0 29 0.06066946\n24     Unica        pot         1 11 0.02301255\n\n\n\ntable(pot$variety, pot$method, pot$infection)\n\n, ,  = 0\n\n           \n            aeroponic bed hydroponic pot\n  Costanera        28   9         11  29\n  Mariva           27  29         31  32\n  Unica            30  31         32  29\n\n, ,  = 1\n\n           \n            aeroponic bed hydroponic pot\n  Costanera        12  31         27  11\n  Mariva           13  11          9   8\n  Unica            10   9          8  11\n\nftable(pot$variety, pot$method, pot$infection)\n\n                       0  1\n                           \nCostanera aeroponic   28 12\n          bed          9 31\n          hydroponic  11 27\n          pot         29 11\nMariva    aeroponic   27 13\n          bed         29 11\n          hydroponic  31  9\n          pot         32  8\nUnica     aeroponic   30 10\n          bed         31  9\n          hydroponic  32  8\n          pot         29 11"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#quantitative-daten",
    "href": "Themen/02/02_DeskriptiveStats.html#quantitative-daten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Quantitative Daten",
    "text": "Quantitative Daten\n\nArithmetischer Mittelwert mean()\nMedian median(): Wert, der an der mittleren (zentralen) Stelle steht, wenn man die Werte der Größe nach sortiert\nMedian besser als arithmetischer Mittelwert bei:\n\nordinalskalierten Beobachtungen\ngeringem Stichprobenumfang\nasymmetrischen Verteilungen\nVerdacht auf Ausreißer\n\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers))\n\n  tubers_avg\n1   4.721757\n\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers))\n\n  tubers_avg tubers_med\n1   4.721757          4\n\n\n\nmean(pot$tubers)\n\n[1] 4.721757\n\nmedian(pot$tubers)\n\n[1] 4\n\n\nMaße für die Streuung der Daten:\n\nVarianz var()\nStandardabweichung sd()\nStandardabweichung in gleicher Einheit wie Mittelwert\nWenn Mittelwert und Standardabweichung einer normalverteilten Grundgesamtheit bekannt ist, kann die Wahrscheinlichkeit berechnet werden, mit der ein Wert auftritt.\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers),\n            tubers_var=var(tubers),\n            tubers_sd=sd(tubers))\n\n  tubers_avg tubers_med tubers_var tubers_sd\n1   4.721757          4   5.190763  2.278324\n\n\n\nvar(pot$tubers)\n\n[1] 5.190763\n\nsd(pot$tubers)\n\n[1] 2.278324\n\n\nDer Standardfehler des Mittelwertes (sem) beschreibt die Genauigkeit der Berechnung des Stichproben-Mittelwertes.\n\nsem = sd/sqrt(n)\nstd &lt;- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))}\nkein Streuungsmaß der Stichprobe\nje mehr Datenpunkte, desto genauer die Schätzung des Mittelwertes\nMittelwert ± 1 sem beschreibt den Wertebereich, in dem wir mit 68%iger Wahrscheinlichkeit den wahren Mittelwert erwarten\nMittelwert ± 1,96 sem 95% Wahrscheinlichkeit i.e. Konfidenzintervall\nMittelwert ± 2 sem 95,5%\nMittelwert ± 3 sem 99,7%\n\n\n# Funktion für den Standardfehler\nstd &lt;- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))} #muss nur einmal definiert werden\nstd(pot$tubers)\n\n[1] 0.1042081\n\n\nweitere Maße zur beschreibenden Statistik:\n\nMinimum min()\nMaximum max()\nWertebereich range()\nQuantile quantile()\nVarianzkoeffizient = CV = sd/mean\n\n\nmin(pot$tubers)\n\n[1] 0\n\nmax(pot$tubers)\n\n[1] 13\n\nrange(pot$tubers)\n\n[1]  0 13\n\nquantile(pot$tubers)\n\n  0%  25%  50%  75% 100% \n   0    3    4    6   13 \n\nquantile(pot$tubers, p=c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.90, 0.95, 0.99))\n\n 1%  5% 10% 25% 50% 75% 90% 95% 99% \n  0   2   2   3   4   6   8   9  11 \n\n#Funktion für Variationskoeffizienten\nCV &lt;- function(x) {sd(x, na.rm=TRUE)/mean(x, na.rm=TRUE)} \n\nq25 = ~quantile(., 0.25),\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers),\n            tubers_var=var(tubers),\n            tubers_sd=sd(tubers),\n            tubers_std=std(tubers),\n            tubers_min=min(tubers),\n            tubers_max=max(tubers),\n            tubers_q25=quantile(tubers, 0.25),\n            tubers_q75=quantile(tubers, 0.75))\n\n  tubers_avg tubers_med tubers_var tubers_sd tubers_std tubers_min tubers_max\n1   4.721757          4   5.190763  2.278324  0.1042081          0         13\n  tubers_q25 tubers_q75\n1          3          6"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#anwendungsbeispiele",
    "href": "Themen/02/02_DeskriptiveStats.html#anwendungsbeispiele",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Anwendungsbeispiele",
    "text": "Anwendungsbeispiele\nEine erste einfache Beschreibung der Daten kann mit der Funktion summary() erfolgen. Hier sieht man jetzt den Unterschied im Output zwischen variety (als character) und variety.f (als factor).\n\nsummary(pot)\n\n   variety             method              plant           tubers      \n Length:478         Length:478         Min.   : 1.00   Min.   : 0.000  \n Class :character   Class :character   1st Qu.: 3.00   1st Qu.: 3.000  \n Mode  :character   Mode  :character   Median : 5.00   Median : 4.000  \n                                       Mean   : 5.49   Mean   : 4.722  \n                                       3rd Qu.: 8.00   3rd Qu.: 6.000  \n                                       Max.   :10.00   Max.   :13.000  \n     weight         infection         humidity         variety.f  \n Min.   :  0.00   Min.   :0.0000   Min.   : 0.00   Costanera:158  \n 1st Qu.: 26.07   1st Qu.:0.0000   1st Qu.:28.53   Mariva   :160  \n Median : 61.00   Median :0.0000   Median :38.14   Unica    :160  \n Mean   : 72.77   Mean   :0.3347   Mean   :38.40                  \n 3rd Qu.:109.25   3rd Qu.:1.0000   3rd Qu.:48.47                  \n Max.   :323.30   Max.   :1.0000   Max.   :80.00                  \n       method.f   infection.f\n aeroponic :120   0:318      \n bed       :120   1:160      \n hydroponic:118              \n pot       :120              \n                             \n                             \n\n\nMöchte man eine beschreibende Statistik für jede numerische Variable berechnen, kann die Funktion summarise_if(is.numeric, mean, na.rm = TRUE) genutzt werden. Im Beispiel berechnen wir den Mittelwert für alle Variablen im data.frame pot.\n\npot %&gt;%\n  summarise_if(is.numeric, mean, na.rm = TRUE)\n\n    plant   tubers   weight infection humidity\n1 5.48954 4.721757 72.77259  0.334728 38.39556\n\n\nHäufig möchte man die beschreibende Statistik für ein oder mehrere Gruppierungslevel berechnen. Bspw. das mittleres Gewicht je Sorte. Wir nutzen hierfür die Funktion group_by():\n\npot %&gt;% group_by(variety) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE))\n\n# A tibble: 3 x 2\n  variety   weight_avg\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Costanera       74.1\n2 Mariva          74.7\n3 Unica           69.6\n\n\nBsp.: mittleres Gewicht je Sorte und Methode\n\npot %&gt;% group_by(variety, method) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'variety'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 x 3\n# Groups:   variety [3]\n   variety   method     weight_avg\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;\n 1 Costanera aeroponic        40.2\n 2 Costanera bed              87.5\n 3 Costanera hydroponic       25.1\n 4 Costanera pot             141. \n 5 Mariva    aeroponic        95.4\n 6 Mariva    bed              96.8\n 7 Mariva    hydroponic       14.3\n 8 Mariva    pot              92.2\n 9 Unica     aeroponic        88.5\n10 Unica     bed              69.1\n11 Unica     hydroponic       26.3\n12 Unica     pot              94.6\n\n\nBsp.: Mittelwert und Standardabweichung von Gewicht je Sorte und Methode\n\npot %&gt;% group_by(variety, method) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE),\n            weight_sd=sd(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'variety'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 x 4\n# Groups:   variety [3]\n   variety   method     weight_avg weight_sd\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1 Costanera aeroponic        40.2     16.6 \n 2 Costanera bed              87.5     32.6 \n 3 Costanera hydroponic       25.1      8.17\n 4 Costanera pot             141.      22.2 \n 5 Mariva    aeroponic        95.4     54.8 \n 6 Mariva    bed              96.8     54.8 \n 7 Mariva    hydroponic       14.3      9.34\n 8 Mariva    pot              92.2     27.4 \n 9 Unica     aeroponic        88.5     70.8 \n10 Unica     bed              69.1     36.4 \n11 Unica     hydroponic       26.3     14.1 \n12 Unica     pot              94.6     60.3 \n\n\nHier ein Code für eine Übersichtstabelle zur Beschreibung der Daten:\n\nlibrary(tidyr)\npot %&gt;% summarise(across(where(is.numeric), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 5 x 9\n  variable    min median   mean  stdev   q25   q75   max     n\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 plant         1    5    5.49   2.87    3     8     10    478\n2 tubers        0    4    4.72   2.28    3     6     13    478\n3 weight        0   61   72.8   53.6    26.1 109.   323.   478\n4 infection     0    0    0.335  0.472   0     1      1    478\n5 humidity      0   38.1 38.4   14.2    28.5  48.5   80    478\n\n\nund hier nur für tubers und weight:\n\npot %&gt;% summarise(across(c(\"tubers\", \"weight\"), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 2 x 9\n  variable   min median  mean stdev   q25   q75   max     n\n  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers       0      4  4.72  2.28   3      6    13    478\n2 weight       0     61 72.8  53.6   26.1  109.  323.   478\n\n\nbzw. ohne plant\n\npot %&gt;% \n  select(!plant)%&gt;% \n  summarise(across(where(is.numeric), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 4 x 9\n  variable    min median   mean  stdev   q25   q75   max     n\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers        0    4    4.72   2.28    3     6     13    478\n2 weight        0   61   72.8   53.6    26.1 109.   323.   478\n3 infection     0    0    0.335  0.472   0     1      1    478\n4 humidity      0   38.1 38.4   14.2    28.5  48.5   80    478\n\n\nfür unterschiedliche Methoden:\n\npot %&gt;%  group_by(method) %&gt;%\n  summarise(across(c(\"tubers\", \"weight\"), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(cols = -method,  names_sep='_', names_to=c('variable', '.value')) %&gt;% \n  arrange(variable)%&gt;% \n  relocate(variable)\n\n# A tibble: 8 x 10\n  variable method       min median   mean stdev   q25   q75   max     n\n  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers   aeroponic   0       5     4.76  2.29  3.75   6    13     120\n2 tubers   bed         1       5     5.55  2.37  4      7    13     120\n3 tubers   hydroponic  1       3     3.15  1.67  2      4     8     118\n4 tubers   pot         2       5     5.4   1.89  4      7    10     120\n5 weight   aeroponic   0      62.1  74.7  57.7  36.2   99.2 323.    120\n6 weight   bed        13.2    79.6  84.5  43.6  50.3  118.  227.    120\n7 weight   hydroponic  2.95   20.0  21.8  12.1  14.1   25.4  58.7   118\n8 weight   pot        11.3   111.  109.   45.9  72.7  143.  248.    120"
  },
  {
>>>>>>> cbda9f72263ed3480defc0019d8fd25577a7de29
    "objectID": "Themen/01/01_Allgemeines.html",
    "href": "Themen/01/01_Allgemeines.html",
    "title": "Allgemeines",
    "section": "",
    "text": "Diese Bücher sind teilweise etwas älter (was die R-Codes anbetrifft). Sie geben aber trotzdem einen guten Einblick in die Statistik und Anwendung von R.\nCrawley 2013: The R Book. 2nd Edition, E-Book unter http://onlinelibrary.wiley.com/book/10.1002/9781118448908\nCrawley 2013: Statistik mit R.\nDormann 2013: Parametrische Statistik.\nBurnham und Anderson 2002: Model Selection and Multimodel Inference.\nJames, Witten, Hastie & Tibshirani 2023: An Introduction to Statistical Learning with Applications in R. https://hastie.su.domains/ISLR2/ISLRv2_corrected_June_2023.pdf.download.html Hastie, Tibshirani & Friedman 2017: The Elements of Statistical Learning - Data Mining, Inference and Prediction https://hastie.su.domains/ElemStatLearn/printings/ESLII_print12_toc.pdf"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#literatur",
    "href": "Themen/01/01_Allgemeines.html#literatur",
    "title": "Allgemeines",
    "section": "",
    "text": "Diese Bücher sind teilweise etwas älter (was die R-Codes anbetrifft). Sie geben aber trotzdem einen guten Einblick in die Statistik und Anwendung von R.\nCrawley 2013: The R Book. 2nd Edition, E-Book unter http://onlinelibrary.wiley.com/book/10.1002/9781118448908\nCrawley 2013: Statistik mit R.\nDormann 2013: Parametrische Statistik.\nBurnham und Anderson 2002: Model Selection and Multimodel Inference.\nJames, Witten, Hastie & Tibshirani 2023: An Introduction to Statistical Learning with Applications in R. https://hastie.su.domains/ISLR2/ISLRv2_corrected_June_2023.pdf.download.html Hastie, Tibshirani & Friedman 2017: The Elements of Statistical Learning - Data Mining, Inference and Prediction https://hastie.su.domains/ElemStatLearn/printings/ESLII_print12_toc.pdf"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#webseiten",
    "href": "Themen/01/01_Allgemeines.html#webseiten",
    "title": "Allgemeines",
    "section": "Webseiten",
    "text": "Webseiten\n\nKursskripte der vorangegangenen Inhouse-Schulungen sowie der zentralen Biometriekurse des BMEL findet ihr im Intranet http://intranet.julius-kuehn.de/forschungservice/biometrie/?L=0\nviele Tutorien im Netz und auf YouTube\nR Cookbook https://rc2e.com/\nDSFAIR von Paul Schmidt https://schmidtpaul.github.io/dsfair_quarto/\nMailing lists und archives auf http://www.r-project.org/\nhttp://de.wikibooks.org/wiki/GNU_R"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#hilfe-in-r",
    "href": "Themen/01/01_Allgemeines.html#hilfe-in-r",
    "title": "Allgemeines",
    "section": "Hilfe in R",
    "text": "Hilfe in R\n\nhelp.start()\nHilefeseite öffnet sich durch ?Funktion z.B. ?mean\nVergleiche ?mean vs. ??mean"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#pakete-installieren-und-laden",
    "href": "Themen/01/01_Allgemeines.html#pakete-installieren-und-laden",
    "title": "Allgemeines",
    "section": "Pakete installieren und laden",
    "text": "Pakete installieren und laden\n\nentweder im Editor install.packages(\"Paketname\") z.B. install.packages(\"nlme\")\noder über das Fenster Packages/Install und dann Name des Package z.B. nlme eintragen und Install klicken\nLaden der Pakete einmal pro Session durch die Funktion library(\"Paketname\") z.B. library(\"nlme\")"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#grundlagen-programmiersprache-r",
    "href": "Themen/01/01_Allgemeines.html#grundlagen-programmiersprache-r",
    "title": "Allgemeines",
    "section": "Grundlagen Programmiersprache R",
    "text": "Grundlagen Programmiersprache R\n\nR unterscheidet zwischen Groß- und Kleinschreibung\nLeerzeichen werden normalerweise ignoriert, d.h. kein Unterschied 2+5 vs. 2 + 5\nKommentare werden mit # markiert und dadurch nicht als Befehl von R erkannt, sondern als Text\nZeilenumbruch bei langen Befehlen kein Problem (ein + erscheint in der nächsten Zeile)\nNormale Rechenoperationen + - * /\nAchtung ein : bedeutet nicht “geteilt durch”! Probier es aus 10:5\nlog(), log10(), exp(), sqrt(), 2^2, 2^0.5"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#r-ist-objektorientiert",
    "href": "Themen/01/01_Allgemeines.html#r-ist-objektorientiert",
    "title": "Allgemeines",
    "section": "R ist objektorientiert",
    "text": "R ist objektorientiert\n\na &lt;- 5\n\nDie 5 wird dem Objekt a zugewiesen\n\nb &lt;- 3\n\nDie 3 wird dem Objekt b zugewiesen\n\nc &lt;- a + b\n\nc ist die Summe aus a und b.\n\nc\n\n[1] 8"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#datentypen",
    "href": "Themen/01/01_Allgemeines.html#datentypen",
    "title": "Allgemeines",
    "section": "Datentypen",
    "text": "Datentypen\nObjekte können verschieden Datentypen zugehören.\n\nNumeric (Zahl)\nCharacter (Zeichenketten, z.B. “Messeweg”)\nLogical (TRUE, FALSE)\nFactor (Kategoriale Daten mit verschiedenen Levels, z.B. hoch, mittel, niedrig oder rot, blau, gelb)"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#datenstrukturen",
    "href": "Themen/01/01_Allgemeines.html#datenstrukturen",
    "title": "Allgemeines",
    "section": "Datenstrukturen",
    "text": "Datenstrukturen\n\nvector (eindimensionale Vektoren)\nmatrix (zweidimensionale Matrizen)\narray (verallgemeinerte Matrizen mit auch mehr als zwei Dimensionen)\nlist (Listen)\ndata.frame (Datensätze i.e. Tabelle mit unterschiedlichen Datentypen je Spalte)\nfunction (Funktionen)"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#funktionen",
    "href": "Themen/01/01_Allgemeines.html#funktionen",
    "title": "Allgemeines",
    "section": "Funktionen",
    "text": "Funktionen\nBeim Aufruf von Funktionen sind die Werte, die der Funktion als Berechnungsgrundlage dienen, in runde Klammern einzuschließen: z.B.\n\nround(1.358) # runden einer Zahl\n\n[1] 1\n\n\nDie Argumentliste besteht aus Zuweisungen an Argumenten in der Form Argumentname=Wert, die der Funktion die notwendigen Eingangsinformationen liefern.\n\nround(1.358, digits=1)\n\n[1] 1.4\n\nround(1.358, 1)# nur eine Kommastelle\n\n[1] 1.4\n\n\nEs können je nach Funktion ein oder mehrere durch Komma getrennte Argumente angegeben werden, die ihrerseits obligatorisch oder nur optional sein können. Funktionen können ineinander verschachtelt werden z.B.\n\nround(mean(c(3,6,2,8)), digits=1)\n\n[1] 4.8\n\n\nAuf eine Kommastelle gerundeter Mittelwert aus den Zahlen 3, 6, 2 und 8.\nDie Hilfeseite für eine Funktion öffnet sich durch ?round.\n\nBeispiel Funktion seq und rep\n\nseq(from = 2, to = 8, by = 2)\n\n[1] 2 4 6 8\n\nseq(from = 2, to = 8, by= 0.5)\n\n [1] 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0\n\nseq(from = 0, to = 9, length = 4)\n\n[1] 0 3 6 9\n\nrep(1:5, times = 2)\n\n [1] 1 2 3 4 5 1 2 3 4 5\n\nrep(1:5, each = 2)\n\n [1] 1 1 2 2 3 3 4 4 5 5\n\nrep(c(\"A\",\"B\"), times = 2)\n\n[1] \"A\" \"B\" \"A\" \"B\""
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#daten-einlesen",
    "href": "Themen/01/01_Allgemeines.html#daten-einlesen",
    "title": "Allgemeines",
    "section": "Daten einlesen",
    "text": "Daten einlesen\n\nSpaltenbenennung (Variablen) ohne Leerzeichen, keine Zahlen am Anfang, kein + - / % besser _\nkurze, prägnante Variablennamen (Stickstoffduengermenge besser ND), Objektnamen (z.B. für den data.frame Stickstoffversuchsdaten besser ndat) und Pfadnamen (ohne ä, ö & ü)\nMissing Values in Excel leer lassen oder als NA in csv\n\n\nDaten direkt aus Excel einlesen\nDiesen Datensatz können wir direkt mit der library(openxlsx) aus Excel einlesen.\n\n\nlibrary(openxlsx)\nmd&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(md)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n# oder\nmd&lt;-read.xlsx(\"potato.xlsx\", sheet=\"Tabelle1\")\n\nSolltet ihr mit RMarkdown arbeiten, dann werden die Daten (ohne Pfadangabe) aus dem Ordner in dem auch das .Rmd gespeichert ist eingelesen.\n\nalternativ könnt ihr den Pfad angeben:\n\n\n# entweder\nmd&lt;-read.xlsx(\"D:/R/Kartoffelversuch/potato.xlsx\", sheet=1)\n# oder\nmd&lt;-read.xlsx(\"D:\\\\R\\\\Kartoffelversuch\\\\potato.xlsx\", sheet=1)\n\noder\n\nihr setzt das working directory\n\nund lest dann die Daten ohne Angabe des Pfades ein\n\n\nsetwd(\"D:/R/Kartoffelversuch\") \nmd&lt;-read.xlsx(\"potato.csv\".xlsx\", sheet=1)\n\nÜber das Argument startRow können Zeilen übersprungen werden. Wenn bspw. die erste Zeile die ausführliche Beschreibung der Spalteninformation enthält und erst in der zweiten Zeile die kurzen prägnanten Variablennamen stehen, dann kann mit startRow=2 der Datensatz ab Zeile 2 eingelesen werden.\n\n\nmd&lt;-read.xlsx(\"potato_Zeile_2.xlsx\", sheet=1, startRow=2)\nstr(md)\n\n'data.frame':   478 obs. of  6 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n\n\nMissing values in Excel leer lassen. R zeigt diese missing values als NA an. \n\nmd2&lt;-read.xlsx(\"potato_NA.xlsx\", sheet=1)\nhead(md2)# zeigt die ersten 6 Zeilen an\n\n  variety method plant tubers weight infection\n1   Unica    pot     1      9  209.9         0\n2   Unica    pot     2      3  248.4         0\n3   Unica    pot     3      4     NA         0\n4   Unica    pot     4      4   77.2         0\n5   Unica    pot     5      2   11.3         1\n6   Unica    pot     6      2   17.8         0\n\n\n\n\nals .csv\n\nin Excel ein Tabellenblatt als .csv oder .txt speichern\nfunktion read.table für .txt oder read.csv für .csv mit den Argumenten:\n\nheader=TRUE bedeutet, dass in der ersten Zeile die Variablenbezeichnungen stehen\nsep ist der Separator, kann Komma, Semikolon oder Tab sein\ndec ist das Dezimalzeichen, kann Komma oder Punkt sein\nread.csv() für englische Excel-Einstellungen\nread.csv2() für deutsche Excel-Einstellungen.\n\n\n\nmd&lt;-read.csv2(\"potato.csv\", header=TRUE)\n# wenn csv unter englischen Excel-Einstellungen gespeichert wurde\nmd&lt;- read.csv(\"potato.csv\", header = TRUE, sep = \",\", dec = \".\")  \n# wenn csv unter deutschen Excel-Einstellungen gespeichert wurde\nmd&lt;- read.csv2(\"potato.csv\", header = TRUE, sep = \";\", dec = \",\") \n\n\n\nals .txt\n\nmd&lt;- read.table(\"potato.txt\", header = TRUE, sep = \"\", dec = \".\")\n\n\n\nDateneinlesen in R-Studio per Klick\nEine weitere Alternative bietet R-Studio auf Environment/Import Dataset. Hier kann man sich durchklicken, um Daten zu importieren. Man sollte aber unbedingt den R-Code nach erfolgtem Import ins Skript kopieren, damit man ihn in der nächsten Sitzung ausführen kann. So behält man den Überblick, welche Daten zur Analyse genutzt wurden. Außerdem können nur so auch Dritte den Import der Daten nachvollziehen. Stichwort reproducible research.\nDer Datenimport aus anderen Statistikprogrammen (SPSS, Stata, SAS) ist mit dem Package foreign oder aus Datenbanken mit dem Package RODBC möglich."
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#datenstruktur-prüfen",
    "href": "Themen/01/01_Allgemeines.html#datenstruktur-prüfen",
    "title": "Allgemeines",
    "section": "Datenstruktur prüfen",
    "text": "Datenstruktur prüfen\nNach erfolgtem Import sollte immer die Struktur der Daten durch die Funktion str() z.B. str(md) überprüft werden.\n\nstr(md)\n\n'data.frame':   478 obs. of  6 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n\n\nWir sehen hier, dass die Sorte und Methode als Character eingelesen wurde und alle anderen Spalten numerisch sind. Schaut bitte zum Kapitel [Beispieldatensatz potato.xlsx], wie Character in Faktoren umgewandelt werden.\nMit den Funktionen head()und tail() lässt man sich die ersten und letzten 6 Zeilen des Datensatzes anzeigen.\n\nhead(md)\n\n  variety method plant tubers weight infection\n1   Unica    pot     1      9  209.9         0\n2   Unica    pot     2      3  248.4         0\n3   Unica    pot     3      4   53.6         0\n4   Unica    pot     4      4   77.2         0\n5   Unica    pot     5      2   11.3         1\n6   Unica    pot     6      2   17.8         0\n\ntail(md)\n\n      variety    method plant tubers weight infection\n473 Costanera aeroponic     5      7   22.7         0\n474 Costanera aeroponic     6      5   38.4         1\n475 Costanera aeroponic     7      3   28.4         0\n476 Costanera aeroponic     8      6   29.1         1\n477 Costanera aeroponic     9      4   17.6         0\n478 Costanera aeroponic    10      7   36.9         0"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#datenexport",
    "href": "Themen/01/01_Allgemeines.html#datenexport",
    "title": "Allgemeines",
    "section": "Datenexport",
    "text": "Datenexport\nWir können die Daten exportieren.\n\nmit dem Package openxlsx:\n\n\nlibrary(openxlsx)\nwrite.xlsx(md, \"potato.export2.xlsx\")\n\nDas Package openxlsx bietet die Möglichkeit, unterschiedliche Datensätze in mehreren Tabellenblättern in einer xlsx-Datei zu speichern. Hier mal exemplarisch, indem wir den potato-Datensatz mit einer summary statistics (siehe Kapitel Deskriptive Statistik) in zwei Tabellenblättern in einer Datei speichern.\n\nlibrary(dplyr)\nmd.sum=md %&gt;% group_by(variety, method) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE),\n            weight_sd=sd(weight, na.rm = TRUE))\nmd.sum\n\n# A tibble: 12 x 4\n# Groups:   variety [3]\n   variety   method     weight_avg weight_sd\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1 Costanera aeroponic        40.2     16.6 \n 2 Costanera bed              87.5     32.6 \n 3 Costanera hydroponic       25.1      8.17\n 4 Costanera pot             141.      22.2 \n 5 Mariva    aeroponic        95.4     54.8 \n 6 Mariva    bed              96.8     54.8 \n 7 Mariva    hydroponic       14.3      9.34\n 8 Mariva    pot              92.2     27.4 \n 9 Unica     aeroponic        88.5     70.8 \n10 Unica     bed              69.1     36.4 \n11 Unica     hydroponic       26.3     14.1 \n12 Unica     pot              94.6     60.3 \n\n\n\nwb &lt;- createWorkbook()\naddWorksheet(wb, sheetName = \"Kartoffeldaten\")\nwriteData(wb, \"Kartoffeldaten\", md) \naddWorksheet(wb, sheetName = \"summary statistics\")\nwriteData(wb, \"summary statistics\", md.sum) \nsaveWorkbook(wb, file = \"potato.export3.xlsx\", overwrite = TRUE)"
  },
  {
    "objectID": "Themen/01/01_Allgemeines.html#datenformat",
    "href": "Themen/01/01_Allgemeines.html#datenformat",
    "title": "Allgemeines",
    "section": "Datenformat",
    "text": "Datenformat\nDas flat format ist gegenüber dem wide format zu bevorzugen.\nBsp. flat format\n\n\n\nBehandl\nErtrag\n\n\n\n\nN0\n3.5\n\n\nN0\n1.5\n\n\nN0\n2.8\n\n\nN0\n3.1\n\n\nN100\n6.4\n\n\nN100\n7.4\n\n\nN100\n5.8\n\n\nN100\n5.4\n\n\nN200\n5.9\n\n\nN200\n8.4\n\n\nN200\n7.7\n\n\nN200\n6.7\n\n\n\nBsp. wide format\n\n\n\nKontrolle\nN-Level 100\nN-Level 200\n\n\n\n\n3.5\n6.4\n5.9\n\n\n1.5\n7.4\n8.4\n\n\n2.8\n5.8\n7.7\n\n\n3.1\n5.4\n6.7\n\n\n\nR kann vom wide zum flat format (und zurück) konvertieren, z.B. mit der Funktion melt aus der library(reshape2). Siehe auch http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/."
<<<<<<< HEAD
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Über diese Webseite",
    "section": "",
    "text": "Diese Webseite ist die Grundlage für meinen Kurs “Einführung in R”, den ich für Wissenschaftler am JKI gebe. Sie soll den Einstieg in die Arbeit mit R erleichtern und anhand von Beispielen Lösungswege und -möglichkeiten für häufig auftretende statistische Fragestellungen aufzeigen. Sie ist als eine Art Kochbuch zu verstehen. Man kann die Rezepte verwenden und selbst kreativ werden.\nDer Inhalt wird kontinuierlich aktualisiert und erweitert.\nBei Fragen und Anmerkungen kontaktiert mich bitte: doreen.gabriel@julius-kuehn.de"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html",
    "href": "Themen/02/02_DeskriptiveStats.html",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "",
    "text": "Diese Daten sind die leicht modifizierten und erweiterten greenhouse-Daten aus dem R-Paket agricolae.\nIn einem Versuch wurden verschiedene Kartoffelsorten (variety) in verschiedenen Anbaumethoden (method) kultiviert und die Anzahl Knollen (tubers), deren Gewicht (weight), der Krankheitsbefall (infection 1=ja, 0=nein) und die mittlere Luftfeuchte (humidity) ermittelt.\nZunächst lesen wir den Datensatz potato.xlsx mit der Funktion read.xlsx aus der library(openxlsx) ein und benennen den data.frame mit pot und machen uns mit ihm vertraut.\n\nlibrary(openxlsx)\npot&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(pot)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nDer Datensatz hat 478 Zeilen (Beobachtungen) und 7 Spalten.\nvariety undmethod sind als character eingelesen.\n\nunique(pot$variety)\n\n[1] \"Unica\"     \"Mariva\"    \"Costanera\"\n\nunique(pot$method)\n\n[1] \"pot\"        \"bed\"        \"hydroponic\" \"aeroponic\" \n\n\nDiese können wir auch in Faktoren umwandeln (siehe Section 2.2.3.1). Alle anderen Variablen sind numerisch."
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#zeilen",
    "href": "Themen/02/02_DeskriptiveStats.html#zeilen",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Zeilen",
    "text": "Zeilen\nWir lernen nun Funtionen aus dem paket dplyr kennen, mit denen wir Beobachtungen, d.h. Zeilen unseres Datensatzes, auswählen oder umsortieren können.\n\nfilter\nMit der Funktion filter können wir ein Subset des Datensatzes erstellen. pot.M enthält mit folgendem Code nur noch Beobachtungen der Sorte Mariva.\n\npot.M&lt;- pot.sub %&gt;% filter(variety==\"Mariva\")\npot.M\n\n# A tibble: 8 x 7\n# Groups:   variety, method [4]\n  variety method     plant tubers weight infection humidity\n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Mariva  aeroponic      7      6  99.2          0     31.8\n2 Mariva  aeroponic      5      5  72.6          0     24.5\n3 Mariva  bed            7      5  59.9          0     56.3\n4 Mariva  bed            8      5  77.3          0     16.3\n5 Mariva  hydroponic     9      2  10.8          0     44.6\n6 Mariva  hydroponic     9      1   7.85         0     48.5\n7 Mariva  pot            5      7 104.           0     41.4\n8 Mariva  pot            8      5  64.8          0     27.3\n\n\npot.BM enthält mit folgendem Code nur noch Beobachtungen der Sorte Mariva und Methode bed.\n\npot.MB&lt;- pot.sub %&gt;% filter(variety==\"Mariva\", method==\"bed\")\npot.MB  \n\n# A tibble: 2 x 7\n# Groups:   variety, method [1]\n  variety method plant tubers weight infection humidity\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Mariva  bed        7      5   59.9         0     56.3\n2 Mariva  bed        8      5   77.3         0     16.3\n\n\nMehrere Ausprägungen einer Variable können mit %in% ausgewählt werden: pot.MU enthält mit folgendem Code nur noch Beobachtungen der Sorten Mariva und Unica.\n\npot.MU&lt;- pot.sub %&gt;% filter(variety%in%c(\"Mariva\", \"Unica\"))\npot.MU\n\n# A tibble: 16 x 7\n# Groups:   variety, method [8]\n   variety method     plant tubers weight infection humidity\n   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Mariva  aeroponic      7      6  99.2          0     31.8\n 2 Mariva  aeroponic      5      5  72.6          0     24.5\n 3 Mariva  bed            7      5  59.9          0     56.3\n 4 Mariva  bed            8      5  77.3          0     16.3\n 5 Mariva  hydroponic     9      2  10.8          0     44.6\n 6 Mariva  hydroponic     9      1   7.85         0     48.5\n 7 Mariva  pot            5      7 104.           0     41.4\n 8 Mariva  pot            8      5  64.8          0     27.3\n 9 Unica   aeroponic      6      2 112.           0     27.5\n10 Unica   aeroponic      7      4  50.1          0     40.0\n11 Unica   bed            9      4 124.           0     41.8\n12 Unica   bed            9      3  38            0     56.8\n13 Unica   hydroponic     6      2  17.1          0     50.2\n14 Unica   hydroponic     4      2  21.8          0     14.3\n15 Unica   pot            7      4  50.4          0     36.0\n16 Unica   pot            9      5  97.7          1     58.7\n\n\nAlternativ können alle Beobachtungen bis auf Sorte Mariva selektiert werden.\n\npot.oM&lt;- pot.sub %&gt;% filter(variety!=(\"Mariva\"))\npot.oM \n\n# A tibble: 16 x 7\n# Groups:   variety, method [8]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            5      3  110.          0     26.6\n 8 Costanera pot            6      7  139.          0     41.6\n 9 Unica     aeroponic      6      2  112.          0     27.5\n10 Unica     aeroponic      7      4   50.1         0     40.0\n11 Unica     bed            9      4  124.          0     41.8\n12 Unica     bed            9      3   38           0     56.8\n13 Unica     hydroponic     6      2   17.1         0     50.2\n14 Unica     hydroponic     4      2   21.8         0     14.3\n15 Unica     pot            7      4   50.4         0     36.0\n16 Unica     pot            9      5   97.7         1     58.7\n\n\nHier werden alle Beobachtungen mit größer gleich 5 Knollen selektiert.\n\npot.T5 &lt;-pot.sub %&gt;% filter(tubers&gt;=5)\npot.T5\n\n# A tibble: 14 x 7\n# Groups:   variety, method [8]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            6      7  139.          0     41.6\n 8 Mariva    aeroponic      7      6   99.2         0     31.8\n 9 Mariva    aeroponic      5      5   72.6         0     24.5\n10 Mariva    bed            7      5   59.9         0     56.3\n11 Mariva    bed            8      5   77.3         0     16.3\n12 Mariva    pot            5      7  104.          0     41.4\n13 Mariva    pot            8      5   64.8         0     27.3\n14 Unica     pot            9      5   97.7         1     58.7\n\npot.T5$tubers\n\n [1] 5 7 7 5 6 5 7 6 5 5 5 7 5 5\n\n\nHier werden alle Beobachtungen mit mehr als 5 Knollen selektiert.\n\npot.T5 &lt;-pot.sub %&gt;% filter(tubers&gt;5)\npot.T5\n\n# A tibble: 6 x 7\n# Groups:   variety, method [6]\n  variety   method     plant tubers weight infection humidity\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Costanera aeroponic      5      7   42           0     26.0\n2 Costanera bed            4      7  137.          1     41.6\n3 Costanera hydroponic     8      6   31.8         1     57.2\n4 Costanera pot            6      7  139.          0     41.6\n5 Mariva    aeroponic      7      6   99.2         0     31.8\n6 Mariva    pot            5      7  104.          0     41.4\n\npot.T5$tubers\n\n[1] 7 7 6 7 6 7\n\n\nzwei Bedingungen (Anzahl Knollen und Gewicht)\n\npot.sub %&gt;% filter(tubers&gt;=5, weight &gt; 80)\n\n# A tibble: 5 x 7\n# Groups:   variety, method [5]\n  variety   method    plant tubers weight infection humidity\n  &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 Costanera bed           4      7  137.          1     41.6\n2 Costanera pot           6      7  139.          0     41.6\n3 Mariva    aeroponic     7      6   99.2         0     31.8\n4 Mariva    pot           5      7  104.          0     41.4\n5 Unica     pot           9      5   97.7         1     58.7\n\n\n\n\narrange\nMit der Funktion arrange sortieren wir die Daten. Hier nach Anzahl tubers in aufsteigender Reihenfolge.\n\npot.sub %&gt;% arrange(tubers)\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Mariva    hydroponic     9      1   7.85         0     48.5\n 2 Mariva    hydroponic     9      2  10.8          0     44.6\n 3 Unica     aeroponic      6      2 112.           0     27.5\n 4 Unica     hydroponic     6      2  17.1          0     50.2\n 5 Unica     hydroponic     4      2  21.8          0     14.3\n 6 Costanera pot            5      3 110.           0     26.6\n 7 Unica     bed            9      3  38            0     56.8\n 8 Unica     aeroponic      7      4  50.1          0     40.0\n 9 Unica     bed            9      4 124.           0     41.8\n10 Unica     pot            7      4  50.4          0     36.0\n# i 14 more rows\n\n\nund hier in absteigender Reihenfolge durch Funktion desc():\n\npot.sub %&gt;% arrange(desc(tubers))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      5      7   42           0     26.0\n 2 Costanera bed            4      7  137.          1     41.6\n 3 Costanera pot            6      7  139.          0     41.6\n 4 Mariva    pot            5      7  104.          0     41.4\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Mariva    aeroponic      7      6   99.2         0     31.8\n 7 Costanera aeroponic      1      5   24.1         0     33.9\n 8 Costanera bed            3      5   78           1     51.0\n 9 Costanera hydroponic     4      5   42           1     56.8\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\nund hier für zwei Kriterien (wobei letzteres Kriterium nur bei gleichen Werten in erstem Kriterium sortiert wird)\n\npot.sub %&gt;% arrange(desc(tubers),desc(weight))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera pot            6      7  139.          0     41.6\n 2 Costanera bed            4      7  137.          1     41.6\n 3 Mariva    pot            5      7  104.          0     41.4\n 4 Costanera aeroponic      5      7   42           0     26.0\n 5 Mariva    aeroponic      7      6   99.2         0     31.8\n 6 Costanera hydroponic     8      6   31.8         1     57.2\n 7 Unica     pot            9      5   97.7         1     58.7\n 8 Costanera bed            3      5   78           1     51.0\n 9 Mariva    bed            8      5   77.3         0     16.3\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\n\nslice\nMit der Funktion slice selektieren wir die Zeilen. Hier Zeile 5 bis 10 im Datensatz pot.\n\npot %&gt;% slice(5:10)\n\n  variety method plant tubers weight infection humidity\n1   Unica    pot     5      2   11.3         1 49.62655\n2   Unica    pot     6      2   17.8         0 54.42449\n3   Unica    pot     7      3   28.1         0 38.82654\n4   Unica    pot     8      6   33.0         0 17.36043\n5   Unica    pot     9      9   81.5         0 24.55165\n6   Unica    pot    10      6   71.1         0 27.55136\n\n\nDie Funktion slice_head(n=3) zeigt die ersten drei Zeilen des Datensatzes an.\n\npot %&gt;% slice_head(n=3)\n\n  variety method plant tubers weight infection humidity\n1   Unica    pot     1      9  209.9         0 26.12342\n2   Unica    pot     2      3  248.4         0 30.23136\n3   Unica    pot     3      4   53.6         0 52.47987\n\n\nDie Funktion slice_tail(n=3) zeigt die letzten drei Zeilen des Datensatzes an.\n\npot %&gt;% slice_tail(n=3)\n\n    variety    method plant tubers weight infection humidity\n1 Costanera aeroponic     8      6   29.1         1 49.90505\n2 Costanera aeroponic     9      4   17.6         0 54.39016\n3 Costanera aeroponic    10      7   36.9         0 29.03782\n\n\nAlternativ könnte man auch die Funtionen head(pot) und tail(pot) nutzen.\nDie Funktion slice_sample(n=3) wählt zufällig drei Beobachtungen aus.\n\npot %&gt;% slice_sample(n=3)\n\n    variety     method plant tubers weight infection humidity\n1     Unica        bed     3      2   18.2         1 42.24794\n2 Costanera        bed     2      4  118.5         1 33.23794\n3     Unica hydroponic     3      2   58.7         0 13.54122\n\n\nWenn man immer das gleiche Set an Proben zufällig auswählen möchte, d.h. ein reproduzierbares Ergebnis erzielen möchte, dann setzt man vorher den seed. Die Zahl (hier 123) kann beliebig gewählt werden.\n\nset.seed(123)\npot %&gt;% slice_sample(n=3)\n\n    variety     method plant tubers weight infection humidity\n1    Mariva        bed     5      3   37.8         1 42.87366\n2 Costanera hydroponic     3      7   18.6         1 54.46725\n3    Mariva        bed     9      6   99.4         0 38.52317\n\n\nDie Funktion slice_max(n=3) wählt die drei Beobachtungen mit dem höchsten Gewicht aus.\n\npot %&gt;% slice_max(weight, n=3)\n\n  variety    method plant tubers weight infection humidity\n1  Mariva aeroponic     6     13  323.3         0 45.84920\n2   Unica aeroponic     9      5  265.4         0 17.41489\n3   Unica       pot     2      3  248.4         0 30.23136"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#spalten",
    "href": "Themen/02/02_DeskriptiveStats.html#spalten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Spalten",
    "text": "Spalten\nHäufig arbeitet man mit großen Datensätzen und vielen Variablen.\n\nselect\nMit der Funktion select kann man Variablen auswählen, indem ich sie durch Komme getrennt aufliste:\n\npot.sub %&gt;% select(variety, method, tubers, weight)\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n\noder von variety bis weight\n\npot.sub %&gt;% select(variety:weight)\n\n# A tibble: 24 x 5\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1\n 2 Costanera aeroponic      5      7   42  \n 3 Costanera bed            4      7  137. \n 4 Costanera bed            3      5   78  \n 5 Costanera hydroponic     8      6   31.8\n 6 Costanera hydroponic     4      5   42  \n 7 Costanera pot            5      3  110. \n 8 Costanera pot            6      7  139. \n 9 Mariva    aeroponic      7      6   99.2\n10 Mariva    aeroponic      5      5   72.6\n# i 14 more rows\n\n\nwie oben nur ohne plant\n\npot.sub %&gt;% \n  select(variety:weight)%&gt;% \n  select(-plant)\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n# oder so\npot.sub %&gt;% \n  select(c(variety:weight,-plant))\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     tubers weight\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1\n 2 Costanera aeroponic       7   42  \n 3 Costanera bed             7  137. \n 4 Costanera bed             5   78  \n 5 Costanera hydroponic      6   31.8\n 6 Costanera hydroponic      5   42  \n 7 Costanera pot             3  110. \n 8 Costanera pot             7  139. \n 9 Mariva    aeroponic       6   99.2\n10 Mariva    aeroponic       5   72.6\n# i 14 more rows\n\n# aber nicht so\npot.sub %&gt;% \n  select(c(-plant, variety:weight))\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     tubers weight infection humidity plant\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 Costanera aeroponic       5   24.1         0     33.9     1\n 2 Costanera aeroponic       7   42           0     26.0     5\n 3 Costanera bed             7  137.          1     41.6     4\n 4 Costanera bed             5   78           1     51.0     3\n 5 Costanera hydroponic      6   31.8         1     57.2     8\n 6 Costanera hydroponic      5   42           1     56.8     4\n 7 Costanera pot             3  110.          0     26.6     5\n 8 Costanera pot             7  139.          0     41.6     6\n 9 Mariva    aeroponic       6   99.2         0     31.8     7\n10 Mariva    aeroponic       5   72.6         0     24.5     5\n# i 14 more rows\n\n\n\npot.sub %&gt;% \n  select(ends_with(\"t\")) \n\nAdding missing grouping variables: `variety`, `method`\n\n\n# A tibble: 24 x 4\n# Groups:   variety, method [12]\n   variety   method     plant weight\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 Costanera aeroponic      1   24.1\n 2 Costanera aeroponic      5   42  \n 3 Costanera bed            4  137. \n 4 Costanera bed            3   78  \n 5 Costanera hydroponic     8   31.8\n 6 Costanera hydroponic     4   42  \n 7 Costanera pot            5  110. \n 8 Costanera pot            6  139. \n 9 Mariva    aeroponic      7   99.2\n10 Mariva    aeroponic      5   72.6\n# i 14 more rows\n\n\n\npot %&gt;% \n  select(ends_with(\"t\")) %&gt;% \n  slice_sample(n=8)\n\n  plant weight\n1     4  65.60\n2     5  78.30\n3     6  10.35\n4     6  14.15\n5     8  43.30\n6     9  34.10\n7     9  16.70\n8     4 142.80\n\n\n\n\nrename\nVariablen können umbenannt werden durch die Funktion rename().\n\npot.sub %&gt;% rename(plant_ID=plant)\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant_ID tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic         1      5   24.1         0     33.9\n 2 Costanera aeroponic         5      7   42           0     26.0\n 3 Costanera bed               4      7  137.          1     41.6\n 4 Costanera bed               3      5   78           1     51.0\n 5 Costanera hydroponic        8      6   31.8         1     57.2\n 6 Costanera hydroponic        4      5   42           1     56.8\n 7 Costanera pot               5      3  110.          0     26.6\n 8 Costanera pot               6      7  139.          0     41.6\n 9 Mariva    aeroponic         7      6   99.2         0     31.8\n10 Mariva    aeroponic         5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\npot.sub\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9\n 2 Costanera aeroponic      5      7   42           0     26.0\n 3 Costanera bed            4      7  137.          1     41.6\n 4 Costanera bed            3      5   78           1     51.0\n 5 Costanera hydroponic     8      6   31.8         1     57.2\n 6 Costanera hydroponic     4      5   42           1     56.8\n 7 Costanera pot            5      3  110.          0     26.6\n 8 Costanera pot            6      7  139.          0     41.6\n 9 Mariva    aeroponic      7      6   99.2         0     31.8\n10 Mariva    aeroponic      5      5   72.6         0     24.5\n# i 14 more rows\n\n\nAuch hier müssen wir die Daten in einem neuen data.frame pot.sub1 speichern oder überschreiben (pot.sub=pot.sub %&gt;% rename(plant_ID=plant)), um auf die neue Variable zugreifen zu können.\n\npot.sub1=pot.sub %&gt;% rename(plant_ID=plant)\npot.sub1\n\n# A tibble: 24 x 7\n# Groups:   variety, method [12]\n   variety   method     plant_ID tubers weight infection humidity\n   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Costanera aeroponic         1      5   24.1         0     33.9\n 2 Costanera aeroponic         5      7   42           0     26.0\n 3 Costanera bed               4      7  137.          1     41.6\n 4 Costanera bed               3      5   78           1     51.0\n 5 Costanera hydroponic        8      6   31.8         1     57.2\n 6 Costanera hydroponic        4      5   42           1     56.8\n 7 Costanera pot               5      3  110.          0     26.6\n 8 Costanera pot               6      7  139.          0     41.6\n 9 Mariva    aeroponic         7      6   99.2         0     31.8\n10 Mariva    aeroponic         5      5   72.6         0     24.5\n# i 14 more rows\n\n\n\n\nmutate\nEine neue Variable kann durch die Funktion mutate berechnet und eingefügt werden.\nBeispielsweise könnten wir das Gewicht in kg statt g angeben. Es wird eine neue Variable erzeugt weight_kg indem weight durch 1000 geteilt wird.\n\npot.sub %&gt;% \n  mutate(weight_kg=weight/1000)\n\n# A tibble: 24 x 8\n# Groups:   variety, method [12]\n   variety   method     plant tubers weight infection humidity weight_kg\n   &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Costanera aeroponic      1      5   24.1         0     33.9    0.0241\n 2 Costanera aeroponic      5      7   42           0     26.0    0.042 \n 3 Costanera bed            4      7  137.          1     41.6    0.137 \n 4 Costanera bed            3      5   78           1     51.0    0.078 \n 5 Costanera hydroponic     8      6   31.8         1     57.2    0.0318\n 6 Costanera hydroponic     4      5   42           1     56.8    0.042 \n 7 Costanera pot            5      3  110.          0     26.6    0.110 \n 8 Costanera pot            6      7  139.          0     41.6    0.139 \n 9 Mariva    aeroponic      7      6   99.2         0     31.8    0.0992\n10 Mariva    aeroponic      5      5   72.6         0     24.5    0.0726\n# i 14 more rows\n\n\nDamit diese neue Variable im Datensatz nicht nur erscheint, sondern auch zugreifbar ist, speichere ich den Datensatz unter einem neuen Namen ab. Man könnte ihn auch überschreiben. Ausserdem noch zwei Beispiele für eine log- und Wurzel-Transformation.\n\npot.sub1=pot.sub %&gt;% \n  mutate(weight_kg=weight/1000,\n         weight.sqrt=sqrt(weight),\n         weight.l=log(weight),\n         tubers.l=log(tubers))\npot.sub1\n\n# A tibble: 24 x 11\n# Groups:   variety, method [12]\n   variety   method plant tubers weight infection humidity weight_kg weight.sqrt\n   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Costanera aerop~     1      5   24.1         0     33.9    0.0241        4.91\n 2 Costanera aerop~     5      7   42           0     26.0    0.042         6.48\n 3 Costanera bed        4      7  137.          1     41.6    0.137        11.7 \n 4 Costanera bed        3      5   78           1     51.0    0.078         8.83\n 5 Costanera hydro~     8      6   31.8         1     57.2    0.0318        5.64\n 6 Costanera hydro~     4      5   42           1     56.8    0.042         6.48\n 7 Costanera pot        5      3  110.          0     26.6    0.110        10.5 \n 8 Costanera pot        6      7  139.          0     41.6    0.139        11.8 \n 9 Mariva    aerop~     7      6   99.2         0     31.8    0.0992        9.96\n10 Mariva    aerop~     5      5   72.6         0     24.5    0.0726        8.52\n# i 14 more rows\n# i 2 more variables: weight.l &lt;dbl&gt;, tubers.l &lt;dbl&gt;\n\n\n\nVariable in Faktor umwandeln\nBeim Importieren von Daten werden Variablen häufig als character eingelesen (oder als numeric), die für die spätere Analyse aber als Faktor benötigt werden. Wir können diese Variablen in Faktoren umwandeln, können diese überschreiben oder (wie unten gezeigt) geben ihnen einen neuen Namen mit dem Appendix “.f”.\n\npot=pot %&gt;% \n    mutate(variety.f=as.factor(variety),\n           method.f=as.factor(method),\n           infection.f=as.factor(infection))\n\nalternativer Code zu oben:\n\npot$variety.f=as.factor(pot$variety)\npot$method.f=as.factor(pot$method)\npot$infection.f=as.factor(pot$infection)\nstr(pot)\n\nMit across(where(is.character),as.factor) werden alle Variablen, die als Charakter eingelesen sind, in einen Faktor umgewandelt.\n\npot2&lt;-read.xlsx(\"potato.xlsx\", sheet=1)\nstr(pot2)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : chr  \"Unica\" \"Unica\" \"Unica\" \"Unica\" ...\n $ method   : chr  \"pot\" \"pot\" \"pot\" \"pot\" ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\npot3&lt;- pot2 %&gt;% mutate(across(where(is.character),as.factor))\nstr(pot3)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: num  0 0 0 0 1 0 0 0 0 0 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nBitte beachten, dass infection damit nicht als Faktor umgewandelt wird, da es als numerische Variable eingelesen wurde. Wir müssen also immer nochmal die Struktur überprüfen und ggfls. nachjustieren.\n\npot4&lt;- pot2 %&gt;% mutate(across(where(is.character),as.factor),\n                       infection=as.factor(infection))\nstr(pot4)\n\n'data.frame':   478 obs. of  7 variables:\n $ variety  : Factor w/ 3 levels \"Costanera\",\"Mariva\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ method   : Factor w/ 4 levels \"aeroponic\",\"bed\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ plant    : num  1 2 3 4 5 6 7 8 9 10 ...\n $ tubers   : num  9 3 4 4 2 2 3 6 9 6 ...\n $ weight   : num  209.9 248.4 53.6 77.2 11.3 ...\n $ infection: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 1 1 1 ...\n $ humidity : num  26.1 30.2 52.5 34 49.6 ...\n\n\nDer große Vorteil von dplyr ist, dass ihr alle Schritte in einen Code schreiben und ihn damit gut nachvollziehen könnt.\n\npot1=pot%&gt;% \n  filter(variety==c(\"Mariva\", \"Costanera\"), tubers&gt;7) %&gt;% \n  mutate(weight_kg=weight/1000, \n         variety.f=as.factor(variety),\n         method.f=as.factor(method),\n         infection.f=as.factor(infection)) %&gt;% \n  select(!c(plant,infection, weight))\npot1\n\n     variety     method tubers humidity variety.f   method.f infection.f\n1     Mariva        bed      9 36.24464    Mariva        bed           0\n2     Mariva        bed     10 13.83214    Mariva        bed           0\n3     Mariva        bed      8 34.63448    Mariva        bed           0\n4  Costanera        pot      8 62.30639 Costanera        pot           1\n5  Costanera hydroponic      8 51.21347 Costanera hydroponic           1\n6  Costanera  aeroponic      9 40.65539 Costanera  aeroponic           0\n7     Mariva        pot     10 27.90961    Mariva        pot           0\n8     Mariva  aeroponic      8 55.48964    Mariva  aeroponic           1\n9  Costanera        pot      8 27.17098 Costanera        pot           0\n10 Costanera        pot      9 25.69880 Costanera        pot           0\n11    Mariva        bed     11 47.62537    Mariva        bed           0\n12    Mariva        bed      8 62.26231    Mariva        bed           1\n13    Mariva  aeroponic     10 28.71567    Mariva  aeroponic           0\n14    Mariva  aeroponic      8 54.04355    Mariva  aeroponic           0\n15    Mariva        pot     10 26.39289    Mariva        pot           0\n16    Mariva        bed     10 54.14047    Mariva        bed           1\n17    Mariva        bed      8 56.14320    Mariva        bed           1\n18    Mariva        bed     10 39.75289    Mariva        bed           0\n19    Mariva  aeroponic      9 30.72462    Mariva  aeroponic           0\n20    Mariva  aeroponic      8 36.82570    Mariva  aeroponic           0\n21 Costanera        pot      8 44.07980 Costanera        pot           0\n22 Costanera        bed      8 61.03558 Costanera        bed           1\n23 Costanera hydroponic      8 69.46336 Costanera hydroponic           1\n   weight_kg\n1     0.2274\n2     0.0338\n3     0.0948\n4     0.1624\n5     0.0486\n6     0.0781\n7     0.0773\n8     0.1205\n9     0.1449\n10    0.1391\n11    0.1182\n12    0.1250\n13    0.1883\n14    0.1656\n15    0.0644\n16    0.1069\n17    0.1332\n18    0.1183\n19    0.0759\n20    0.1684\n21    0.1531\n22    0.0494\n23    0.0253"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#qualitative-daten",
    "href": "Themen/02/02_DeskriptiveStats.html#qualitative-daten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Qualitative Daten",
    "text": "Qualitative Daten\nQualitative Variablen sind in unserem Beispiel die Sorte, der Krankheitsbefall und die Methode. Diese Daten beschreiben wir durch Häufigkeitstabellen (Kontingenztabellen), die angeben, wie häufig eine Merkmalsausprägung bzw. -kombination in unserem Datensatz vorkommt. Wir nutzen die Funktion count()aus dem Package dplyr\n\npot %&gt;% count(variety)\n\n    variety   n\n1 Costanera 158\n2    Mariva 160\n3     Unica 160\n\n\noder die Funktion table().\n\ntable(pot$variety) \n\n\nCostanera    Mariva     Unica \n      158       160       160 \n\n\nDie Funktion prop.table() berechnet uns die relativen Anteile jeder Merkmalsausprägung bzw. -kombination.\n\npot %&gt;% count(variety) %&gt;% \n  mutate(prop = prop.table(n))\n\n    variety   n      prop\n1 Costanera 158 0.3305439\n2    Mariva 160 0.3347280\n3     Unica 160 0.3347280\n\n\n\nprop.table(table(pot$variety)) # relativ, i.e. Anteil der Beobachtungen an der Gesamtzahl der Beobachtungen \n\n\nCostanera    Mariva     Unica \n0.3305439 0.3347280 0.3347280 \n\n\nHäufigkeitstabellen können für 2 Kombinationen (Merkmale) erstellt werden, indem man beide Variablen in der Funktion count() oder table() angibt.\n\npot %&gt;% count(variety, infection) %&gt;% \n  mutate(prop = prop.table(n))\n\n    variety infection   n       prop\n1 Costanera         0  77 0.16108787\n2 Costanera         1  81 0.16945607\n3    Mariva         0 119 0.24895397\n4    Mariva         1  41 0.08577406\n5     Unica         0 122 0.25523013\n6     Unica         1  38 0.07949791\n\n\n\ntable(pot$variety, pot$infection)\n\n           \n              0   1\n  Costanera  77  81\n  Mariva    119  41\n  Unica     122  38\n\nprop.table(table(pot$variety, pot$infection)) # relative Häufigkeit\n\n           \n                     0          1\n  Costanera 0.16108787 0.16945607\n  Mariva    0.24895397 0.08577406\n  Unica     0.25523013 0.07949791\n\n\nHäufigkeitstabelle für 3 Kombinationen\n\npot %&gt;% count(variety, method, infection) %&gt;% \n  mutate(prop = prop.table(n))\n\n     variety     method infection  n       prop\n1  Costanera  aeroponic         0 28 0.05857741\n2  Costanera  aeroponic         1 12 0.02510460\n3  Costanera        bed         0  9 0.01882845\n4  Costanera        bed         1 31 0.06485356\n5  Costanera hydroponic         0 11 0.02301255\n6  Costanera hydroponic         1 27 0.05648536\n7  Costanera        pot         0 29 0.06066946\n8  Costanera        pot         1 11 0.02301255\n9     Mariva  aeroponic         0 27 0.05648536\n10    Mariva  aeroponic         1 13 0.02719665\n11    Mariva        bed         0 29 0.06066946\n12    Mariva        bed         1 11 0.02301255\n13    Mariva hydroponic         0 31 0.06485356\n14    Mariva hydroponic         1  9 0.01882845\n15    Mariva        pot         0 32 0.06694561\n16    Mariva        pot         1  8 0.01673640\n17     Unica  aeroponic         0 30 0.06276151\n18     Unica  aeroponic         1 10 0.02092050\n19     Unica        bed         0 31 0.06485356\n20     Unica        bed         1  9 0.01882845\n21     Unica hydroponic         0 32 0.06694561\n22     Unica hydroponic         1  8 0.01673640\n23     Unica        pot         0 29 0.06066946\n24     Unica        pot         1 11 0.02301255\n\n\n\ntable(pot$variety, pot$method, pot$infection)\n\n, ,  = 0\n\n           \n            aeroponic bed hydroponic pot\n  Costanera        28   9         11  29\n  Mariva           27  29         31  32\n  Unica            30  31         32  29\n\n, ,  = 1\n\n           \n            aeroponic bed hydroponic pot\n  Costanera        12  31         27  11\n  Mariva           13  11          9   8\n  Unica            10   9          8  11\n\nftable(pot$variety, pot$method, pot$infection)\n\n                       0  1\n                           \nCostanera aeroponic   28 12\n          bed          9 31\n          hydroponic  11 27\n          pot         29 11\nMariva    aeroponic   27 13\n          bed         29 11\n          hydroponic  31  9\n          pot         32  8\nUnica     aeroponic   30 10\n          bed         31  9\n          hydroponic  32  8\n          pot         29 11"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#quantitative-daten",
    "href": "Themen/02/02_DeskriptiveStats.html#quantitative-daten",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Quantitative Daten",
    "text": "Quantitative Daten\n\nArithmetischer Mittelwert mean()\nMedian median(): Wert, der an der mittleren (zentralen) Stelle steht, wenn man die Werte der Größe nach sortiert\nMedian besser als arithmetischer Mittelwert bei:\n\nordinalskalierten Beobachtungen\ngeringem Stichprobenumfang\nasymmetrischen Verteilungen\nVerdacht auf Ausreißer\n\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers))\n\n  tubers_avg\n1   4.721757\n\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers))\n\n  tubers_avg tubers_med\n1   4.721757          4\n\n\n\nmean(pot$tubers)\n\n[1] 4.721757\n\nmedian(pot$tubers)\n\n[1] 4\n\n\nMaße für die Streuung der Daten:\n\nVarianz var()\nStandardabweichung sd()\nStandardabweichung in gleicher Einheit wie Mittelwert\nWenn Mittelwert und Standardabweichung einer normalverteilten Grundgesamtheit bekannt ist, kann die Wahrscheinlichkeit berechnet werden, mit der ein Wert auftritt.\n\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers),\n            tubers_var=var(tubers),\n            tubers_sd=sd(tubers))\n\n  tubers_avg tubers_med tubers_var tubers_sd\n1   4.721757          4   5.190763  2.278324\n\n\n\nvar(pot$tubers)\n\n[1] 5.190763\n\nsd(pot$tubers)\n\n[1] 2.278324\n\n\nDer Standardfehler des Mittelwertes (sem) beschreibt die Genauigkeit der Berechnung des Stichproben-Mittelwertes.\n\nsem = sd/sqrt(n)\nstd &lt;- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))}\nkein Streuungsmaß der Stichprobe\nje mehr Datenpunkte, desto genauer die Schätzung des Mittelwertes\nMittelwert ± 1 sem beschreibt den Wertebereich, in dem wir mit 68%iger Wahrscheinlichkeit den wahren Mittelwert erwarten\nMittelwert ± 1,96 sem 95% Wahrscheinlichkeit i.e. Konfidenzintervall\nMittelwert ± 2 sem 95,5%\nMittelwert ± 3 sem 99,7%\n\n\n# Funktion für den Standardfehler\nstd &lt;- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))} #muss nur einmal definiert werden\nstd(pot$tubers)\n\n[1] 0.1042081\n\n\nweitere Maße zur beschreibenden Statistik:\n\nMinimum min()\nMaximum max()\nWertebereich range()\nQuantile quantile()\nVarianzkoeffizient = CV = sd/mean\n\n\nmin(pot$tubers)\n\n[1] 0\n\nmax(pot$tubers)\n\n[1] 13\n\nrange(pot$tubers)\n\n[1]  0 13\n\nquantile(pot$tubers)\n\n  0%  25%  50%  75% 100% \n   0    3    4    6   13 \n\nquantile(pot$tubers, p=c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.90, 0.95, 0.99))\n\n 1%  5% 10% 25% 50% 75% 90% 95% 99% \n  0   2   2   3   4   6   8   9  11 \n\n#Funktion für Variationskoeffizienten\nCV &lt;- function(x) {sd(x, na.rm=TRUE)/mean(x, na.rm=TRUE)} \n\nq25 = ~quantile(., 0.25),\n\npot %&gt;% \n  summarise(tubers_avg=mean(tubers),\n            tubers_med=median(tubers),\n            tubers_var=var(tubers),\n            tubers_sd=sd(tubers),\n            tubers_std=std(tubers),\n            tubers_min=min(tubers),\n            tubers_max=max(tubers),\n            tubers_q25=quantile(tubers, 0.25),\n            tubers_q75=quantile(tubers, 0.75))\n\n  tubers_avg tubers_med tubers_var tubers_sd tubers_std tubers_min tubers_max\n1   4.721757          4   5.190763  2.278324  0.1042081          0         13\n  tubers_q25 tubers_q75\n1          3          6"
  },
  {
    "objectID": "Themen/02/02_DeskriptiveStats.html#anwendungsbeispiele",
    "href": "Themen/02/02_DeskriptiveStats.html#anwendungsbeispiele",
    "title": "Datenmanagement und deskriptive Statistik",
    "section": "Anwendungsbeispiele",
    "text": "Anwendungsbeispiele\nEine erste einfache Beschreibung der Daten kann mit der Funktion summary() erfolgen. Hier sieht man jetzt den Unterschied im Output zwischen variety (als character) und variety.f (als factor).\n\nsummary(pot)\n\n   variety             method              plant           tubers      \n Length:478         Length:478         Min.   : 1.00   Min.   : 0.000  \n Class :character   Class :character   1st Qu.: 3.00   1st Qu.: 3.000  \n Mode  :character   Mode  :character   Median : 5.00   Median : 4.000  \n                                       Mean   : 5.49   Mean   : 4.722  \n                                       3rd Qu.: 8.00   3rd Qu.: 6.000  \n                                       Max.   :10.00   Max.   :13.000  \n     weight         infection         humidity         variety.f  \n Min.   :  0.00   Min.   :0.0000   Min.   : 0.00   Costanera:158  \n 1st Qu.: 26.07   1st Qu.:0.0000   1st Qu.:28.53   Mariva   :160  \n Median : 61.00   Median :0.0000   Median :38.14   Unica    :160  \n Mean   : 72.77   Mean   :0.3347   Mean   :38.40                  \n 3rd Qu.:109.25   3rd Qu.:1.0000   3rd Qu.:48.47                  \n Max.   :323.30   Max.   :1.0000   Max.   :80.00                  \n       method.f   infection.f\n aeroponic :120   0:318      \n bed       :120   1:160      \n hydroponic:118              \n pot       :120              \n                             \n                             \n\n\nMöchte man eine beschreibende Statistik für jede numerische Variable berechnen, kann die Funktion summarise_if(is.numeric, mean, na.rm = TRUE) genutzt werden. Im Beispiel berechnen wir den Mittelwert für alle Variablen im data.frame pot.\n\npot %&gt;%\n  summarise_if(is.numeric, mean, na.rm = TRUE)\n\n    plant   tubers   weight infection humidity\n1 5.48954 4.721757 72.77259  0.334728 38.39556\n\n\nHäufig möchte man die beschreibende Statistik für ein oder mehrere Gruppierungslevel berechnen. Bspw. das mittleres Gewicht je Sorte. Wir nutzen hierfür die Funktion group_by():\n\npot %&gt;% group_by(variety) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE))\n\n# A tibble: 3 x 2\n  variety   weight_avg\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Costanera       74.1\n2 Mariva          74.7\n3 Unica           69.6\n\n\nBsp.: mittleres Gewicht je Sorte und Methode\n\npot %&gt;% group_by(variety, method) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'variety'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 x 3\n# Groups:   variety [3]\n   variety   method     weight_avg\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;\n 1 Costanera aeroponic        40.2\n 2 Costanera bed              87.5\n 3 Costanera hydroponic       25.1\n 4 Costanera pot             141. \n 5 Mariva    aeroponic        95.4\n 6 Mariva    bed              96.8\n 7 Mariva    hydroponic       14.3\n 8 Mariva    pot              92.2\n 9 Unica     aeroponic        88.5\n10 Unica     bed              69.1\n11 Unica     hydroponic       26.3\n12 Unica     pot              94.6\n\n\nBsp.: Mittelwert und Standardabweichung von Gewicht je Sorte und Methode\n\npot %&gt;% group_by(variety, method) %&gt;% \n  summarise(weight_avg=mean(weight, na.rm = TRUE),\n            weight_sd=sd(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'variety'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 x 4\n# Groups:   variety [3]\n   variety   method     weight_avg weight_sd\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1 Costanera aeroponic        40.2     16.6 \n 2 Costanera bed              87.5     32.6 \n 3 Costanera hydroponic       25.1      8.17\n 4 Costanera pot             141.      22.2 \n 5 Mariva    aeroponic        95.4     54.8 \n 6 Mariva    bed              96.8     54.8 \n 7 Mariva    hydroponic       14.3      9.34\n 8 Mariva    pot              92.2     27.4 \n 9 Unica     aeroponic        88.5     70.8 \n10 Unica     bed              69.1     36.4 \n11 Unica     hydroponic       26.3     14.1 \n12 Unica     pot              94.6     60.3 \n\n\nHier ein Code für eine Übersichtstabelle zur Beschreibung der Daten:\n\nlibrary(tidyr)\npot %&gt;% summarise(across(where(is.numeric), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 5 x 9\n  variable    min median   mean  stdev   q25   q75   max     n\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 plant         1    5    5.49   2.87    3     8     10    478\n2 tubers        0    4    4.72   2.28    3     6     13    478\n3 weight        0   61   72.8   53.6    26.1 109.   323.   478\n4 infection     0    0    0.335  0.472   0     1      1    478\n5 humidity      0   38.1 38.4   14.2    28.5  48.5   80    478\n\n\nund hier nur für tubers und weight:\n\npot %&gt;% summarise(across(c(\"tubers\", \"weight\"), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 2 x 9\n  variable   min median  mean stdev   q25   q75   max     n\n  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers       0      4  4.72  2.28   3      6    13    478\n2 weight       0     61 72.8  53.6   26.1  109.  323.   478\n\n\nbzw. ohne plant\n\npot %&gt;% \n  select(!plant)%&gt;% \n  summarise(across(where(is.numeric), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))\n\n# A tibble: 4 x 9\n  variable    min median   mean  stdev   q25   q75   max     n\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers        0    4    4.72   2.28    3     6     13    478\n2 weight        0   61   72.8   53.6    26.1 109.   323.   478\n3 infection     0    0    0.335  0.472   0     1      1    478\n4 humidity      0   38.1 38.4   14.2    28.5  48.5   80    478\n\n\nfür unterschiedliche Methoden:\n\npot %&gt;%  group_by(method) %&gt;%\n  summarise(across(c(\"tubers\", \"weight\"), .fns = \n                     list(min = min,\n                          median = median,\n                          mean = mean,\n                          stdev = sd,\n                          q25 = ~quantile(., 0.25),\n                          q75 = ~quantile(., 0.75),\n                          max = max, \n                          n=length))) %&gt;%\n  pivot_longer(cols = -method,  names_sep='_', names_to=c('variable', '.value')) %&gt;% \n  arrange(variable)%&gt;% \n  relocate(variable)\n\n# A tibble: 8 x 10\n  variable method       min median   mean stdev   q25   q75   max     n\n  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 tubers   aeroponic   0       5     4.76  2.29  3.75   6    13     120\n2 tubers   bed         1       5     5.55  2.37  4      7    13     120\n3 tubers   hydroponic  1       3     3.15  1.67  2      4     8     118\n4 tubers   pot         2       5     5.4   1.89  4      7    10     120\n5 weight   aeroponic   0      62.1  74.7  57.7  36.2   99.2 323.    120\n6 weight   bed        13.2    79.6  84.5  43.6  50.3  118.  227.    120\n7 weight   hydroponic  2.95   20.0  21.8  12.1  14.1   25.4  58.7   118\n8 weight   pot        11.3   111.  109.   45.9  72.7  143.  248.    120"
=======
>>>>>>> cbda9f72263ed3480defc0019d8fd25577a7de29
  }
]