---
title: "Datenmanagement und deskriptive Statistik"
---

```{r, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, error= TRUE, comment = NA, options(Encoding="UTF-8"))
```

# Beispieldatensatz potato.xlsx {#sec-pot}

Diese Daten sind die leicht modifizierten und erweiterten `greenhouse`-Daten aus dem R-Paket `agricolae`.

In einem Versuch wurden verschiedene Kartoffelsorten (`variety`) in verschiedenen Anbaumethoden (`method`) kultiviert und die Anzahl Knollen (`tubers`), deren Gewicht (`weight`) und der Krankheitsbefall (`infection` 1=ja, 0=nein) ermittelt.

Zunächst lesen wir den Datensatz `potato.xlsx` mit der Funktion `read.xlsx` aus der `library(openxlsx)` ein und benennen den `data.frame` mit `pot` und machen uns mit ihm vertraut.

```{r}
library(openxlsx)
pot<-read.xlsx("potato.xlsx", sheet=1)
str(pot)
```

Der Datensatz hat 478 Zeilen (Beobachtungen) und 6 Spalten.

`variety` und` method` sind als *character* eingelesen.

```{r}
unique(pot$variety)
unique(pot$method)
```

Diese können wir auch in Faktoren umwandeln (siehe @sec-mutate).
Alle anderen Variablen sind numerisch. 

# Datenmanagement mit dplyr

Eine gute Hilfestellung für `dplyr` findet ihr unter:\
[https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html){target="_blank"}

Wir laden zunächst das Paket `dplyr` ein.

```{r, message=F}
library(dplyr)
```

Um den Output der folgenden Beispiele übersichtlicher zu gestalten, erstelle ich ein Subset aus dem Datensatz `pot`, der nur 24 Beobachtungen enthält (zwei Beobachtungen für jede Kombination aus Sorte und Methode).

```{r}
set.seed(123)
pot.sub=pot%>% 
    group_by(variety, method) %>%
    slice_sample(n = 2)
print(pot.sub, n=24)
```

## Zeilen

Wir lernen nun Funtionen aus dem paket `dplyr` kennen, mit denen wir Beobachtungen, d.h. Zeilen unseres Datensatzes, auswählen oder umsortieren können.

### filter

Mit der Funktion `filter` können wir ein Subset des Datensatzes erstellen. `pot.M` enthält mit folgendem Code nur noch Beobachtungen der Sorte `Mariva`.

```{r}
pot.M<- pot.sub %>% filter(variety=="Mariva")
pot.M
```

`pot.BM` enthält mit folgendem Code nur noch Beobachtungen der Sorte `Mariva` und Methode `bed`.

```{r}
pot.MB<- pot.sub %>% filter(variety=="Mariva", method=="bed")
pot.MB  
```

Mehrere Ausprägungen einer Variable können mit `%in%` ausgewählt werden: `pot.MU` enthält mit folgendem Code nur noch Beobachtungen der Sorten `Mariva` und `Unica`.

```{r}
pot.MU<- pot.sub %>% filter(variety%in%c("Mariva", "Unica"))
pot.MU
```

Alternativ können alle Beobachtungen bis auf Sorte `Mariva` selektiert werden.

```{r}
pot.oM<- pot.sub %>% filter(variety!=("Mariva"))
pot.oM 
```

Hier werden alle Beobachtungen mit größer gleich 5 Knollen selektiert.

```{r}
pot.T5 <-pot.sub %>% filter(tubers>=5)
pot.T5
pot.T5$tubers
```

Hier werden alle Beobachtungen mit mehr als 5 Knollen selektiert.

```{r}
pot.T5 <-pot.sub %>% filter(tubers>5)
pot.T5
pot.T5$tubers
```

zwei Bedingungen (Anzahl Knollen und Gewicht)

```{r}
pot.sub %>% filter(tubers>=5, weight > 80)
```

### arrange

Mit der Funktion `arrange` sortieren wir die Daten. Hier nach Anzahl `tubers` in aufsteigender Reihenfolge.

```{r}
pot.sub %>% arrange(tubers)
```

und hier in absteigender Reihenfolge durch Funktion `desc()`:

```{r}
pot.sub %>% arrange(desc(tubers))
```

und hier für zwei Kriterien (wobei letzteres Kriterium nur bei gleichen Werten in erstem Kriterium sortiert wird)

```{r}
pot.sub %>% arrange(desc(tubers),desc(weight))
```

### slice

Mit der Funktion `slice` selektieren wir die Zeilen. Hier Zeile 5 bis 10 im Datensatz `pot`.

```{r}
pot %>% slice(5:10)
```

Die Funktion `slice_head(n=3)` zeigt die ersten drei Zeilen des Datensatzes an.

```{r}
pot %>% slice_head(n=3)
```

Die Funktion `slice_tail(n=3)` zeigt die letzten drei Zeilen des Datensatzes an.

```{r}
pot %>% slice_tail(n=3)
```

Alternativ könnte man auch die Funtionen `head(pot)` und `tail(pot)` nutzen.

Die Funktion `slice_sample(n=3)` wählt zufällig drei Beobachtungen aus.

```{r}
pot %>% slice_sample(n=3)
```

Wenn man immer das gleiche Set an Proben zufällig auswählen möchte, d.h. ein reproduzierbares Ergebnis erzielen möchte, dann setzt man vorher den `seed`. Die Zahl (hier 123) kann beliebig gewählt werden.

```{r}
set.seed(123)
pot %>% slice_sample(n=3)
```

Die Funktion `slice_max(n=3)` wählt die drei Beobachtungen mit dem höchsten Gewicht aus.

```{r}
pot %>% slice_max(weight, n=3)
```

## Spalten

Häufig arbeitet man mit großen Datensätzen und vielen Variablen.

### select

Mit der Funktion `select` kann man Variablen auswählen, indem ich sie durch Komme getrennt aufliste:

```{r}
pot.sub %>% select(variety, method, tubers, weight)
```

oder von `variety` bis `weight`

```{r}
pot.sub %>% select(variety:weight)
```

wie oben nur ohne `plant`

```{r}
pot.sub %>% 
  select(variety:weight)%>% 
  select(!plant)
```

```{r}
pot %>% 
  select(ends_with(".f")) %>% 
  slice_sample(n=8)
```

### rename

Variablen können umbenannt werden durch die Funktion `rename()`.

```{r}
pot.sub %>% rename(plant_ID=plant)
```

```{r}
pot.sub
```

Auch hire müssen wir die Daten in einem neuen `data.frame pot.sub1` speichern oder überschreiben (`pot.sub=pot.sub %>% rename(plant_ID=plant)`), um auf die neue Variable zugreifen zu können.

```{r}
pot.sub1=pot.sub %>% rename(plant_ID=plant)
pot.sub1
```

### mutate

Eine neue Variable kann durch die Funktion `mutate` berechnet und eingefügt werden.

Beispielsweise könnten wir das Gewicht in kg statt g angeben. Es wird eine neue Variable erzeugt `weight_kg` indem `weight` durch 1000 geteilt wird.

```{r}
pot.sub %>% 
  mutate(weight_kg=weight/1000)
```

Damit diese neue Variable im Datensatz nicht nur erscheint, sondern auch zugreifbar ist, speichere ich den Datensatz unter einem neuen Namen ab. Man könnte ihn auch überschreiben. Ausserdem noch zwei Beispiele für eine log- und Wurzel-Transformation

```{r}
pot.sub1=pot.sub %>% 
  mutate(weight_kg=weight/1000,
         weight.sqrt=sqrt(weight),
         weight.l=log(weight),
         tubers.l=log(tubers))
pot.sub1
```

#### Character Variable in Faktor umwandeln {#sec-mutate}

Beim Importieren von Daten werden Variablen häufig als `character` eingelesen (oder als `numeric`), die für die spätere Analyse aber als Faktor benötigt werden. Wir können diese Variablen in Faktoren umwandeln, können diese überschreiben oder (wie unten gezeigt) geben ihnen einen neuen Namen mit dem Appendix ".f".

```{r}
pot=pot %>% 
    mutate(variety.f=as.factor(variety),
           method.f=as.factor(method),
           infection.f=as.factor(infection))
```

alternativer Code zu oben:

```{r, eval=FALSE}
pot$variety.f=as.factor(pot$variety)
pot$method.f=as.factor(pot$method)
pot$infection.f=as.factor(pot$infection)
str(pot)
```

Mit `across(where(is.character),as.factor)` werden alle Variablen, die als Charakter eingelesen sind, in einen Faktor umgewandelt.

```{r}
pot2<-read.xlsx("potato.xlsx", sheet=1)
str(pot2)
pot3<- pot2 %>% mutate(across(where(is.character),as.factor))
str(pot3)
```

Bitte beachten, dass `infection` damit nicht als Faktor umgewandelt wird, da es als numerische Variable eingelesen wurde. Wir müssen also immer nochmal die Struktur überprüfen und ggfls. nachjustieren.

```{r}
pot4<- pot2 %>% mutate(across(where(is.character),as.factor),
                       infection=as.factor(infection))
str(pot4)

```

Der große Vorteil von `dplyr` ist, dass ihr alle Schritte in einen Code schreiben und damit ihn gut nachvollziehen könnt.

```{r}
pot1=pot%>% 
  filter(variety==c("Mariva", "Costanera"), tubers>7) %>% 
  mutate(weight_kg=weight/1000, 
         variety.f=as.factor(variety),
         method.f=as.factor(method),
         infection.f=as.factor(infection)) %>% 
  select(!c(plant,infection, weight))
pot1
```

# Deskriptive Statistik

-   Wir unterscheiden zwischen qualitativen (kategorialen) und quantitativen (numerischen) Daten.
-   Qualitative Daten können weiter differenziert werden in
    -   nominale Daten (ohne Rangordnung), z.B. Geschlecht (m, w), Blutgruppe, Sorte und Augenfarbe
    -   ordinale Daten (mit Rangordnung), z.B. Eignung (gut, mittel, schlecht), Platzierung bei einem Rennen, Boniturnoten
-   Quantitative Daten können weiter unterschieden werden in
    -   diskrete (ganzzahlig) Daten, z.B. Anzahl Blattläuse, Anzahl Nachkommen
    -   stetige Daten, z.B. Ertrag, pH-Wert, Körpergröße, Parasitierungsrate

## Qualitative Daten

Qualitative Variablen sind in unserem Beispiel die Sorte, der Krankheitsbefall und die Methode. Diese Daten beschreiben wir durch *Häufigkeitstabellen (Kontingenztabellen)*, die angeben, wie häufig eine Merkmalsausprägung bzw. -kombination in unserem Datensatz vorkommt. Wir nutzen die Funktion `count()`aus dem Package `dplyr`

```{r}
pot %>% count(variety)
```

oder die Funktion `table()`.

```{r}
table(pot$variety) 
```

Die Funktion `prop.table()` berechnet uns die relativen Anteile jeder Merkmalsausprägung bzw. -kombination.

```{r}
pot %>% count(variety) %>% 
  mutate(prop = prop.table(n))
```

```{r}
prop.table(table(pot$variety)) # relativ, i.e. Anteil der Beobachtungen an der Gesamtzahl der Beobachtungen 
```

Häufigkeitstabellen können für 2 Kombinationen (Merkmale) erstellt werden, indem man beide Variablen in der Funktion `count()` oder `table()` angibt.

```{r}
pot %>% count(variety, infection) %>% 
  mutate(prop = prop.table(n))
```

```{r}
table(pot$variety, pot$infection)
prop.table(table(pot$variety, pot$infection)) # relative Häufigkeit
```

Häufigkeitstabelle für 3 Kombinationen

```{r}
pot %>% count(variety, method, infection) %>% 
  mutate(prop = prop.table(n))
```

```{r}
table(pot$variety, pot$method, pot$infection)
ftable(pot$variety, pot$method, pot$infection)
```

## Quantitative Daten

-   Arithmetischer Mittelwert `mean()`
-   Median `median()`: Wert, der an der mittleren (zentralen) Stelle steht, wenn man die Werte der Größe nach sortiert
-   Median besser als arithmetischer Mittelwert bei:
    -   ordinalskalierten Beobachtungen
    -   geringem Stichprobenumfang
    -   asymmetrischen Verteilungen
    -   Verdacht auf Ausreißer

```{r}
pot %>% 
  summarise(tubers_avg=mean(tubers))
```

```{r}
pot %>% 
  summarise(tubers_avg=mean(tubers),
            tubers_med=median(tubers))
```

```{r}
mean(pot$tubers)
median(pot$tubers)
```

Maße für die Streuung der Daten:

-   Varianz `var()`
-   Standardabweichung `sd()`
-   Standardabweichung in gleicher Einheit wie Mittelwert
-   Wenn Mittelwert und Standardabweichung einer normalverteilten Grundgesamtheit bekannt ist, kann die Wahrscheinlichkeit berechnet werden, mit der ein Wert auftritt.

```{r}
pot %>% 
  summarise(tubers_avg=mean(tubers),
            tubers_med=median(tubers),
            tubers_var=var(tubers),
            tubers_sd=sd(tubers))
```

```{r}
var(pot$tubers)
sd(pot$tubers)
```

Der Standardfehler des Mittelwertes (sem) beschreibt die Genauigkeit der Berechnung des Stichproben-Mittelwertes.

-   sem = sd/sqrt(n)
-   `std <- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))}`
-   kein Streuungsmaß der Stichprobe
-   je mehr Datenpunkte, desto genauer die Schätzung des Mittelwertes
-   Mittelwert ± 1 sem beschreibt den Wertebereich, in dem wir mit 68%iger Wahrscheinlichkeit den wahren Mittelwert erwarten
-   Mittelwert ± 1,96 sem 95% Wahrscheinlichkeit i.e. Konfidenzintervall
-   Mittelwert ± 2 sem 95,5%
-   Mittelwert ± 3 sem 99,7%

```{r}
# Funktion für den Standardfehler
std <- function(x) {sd(x, na.rm=TRUE)/sqrt(length(na.omit(x)))} #muss nur einmal definiert werden
std(pot$tubers)
```

weitere Maße zur beschreibenden Statistik:

-   Minimum `min()`
-   Maximum `max()`
-   Wertebereich `range()`
-   Quantile `quantile()`
-   Varianzkoeffizient = CV = sd/mean

```{r}
min(pot$tubers)
max(pot$tubers)
range(pot$tubers)
quantile(pot$tubers)
quantile(pot$tubers, p=c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.90, 0.95, 0.99))

#Funktion für Variationskoeffizienten
CV <- function(x) {sd(x, na.rm=TRUE)/mean(x, na.rm=TRUE)} 
```

q25 = \~quantile(., 0.25),

```{r}
pot %>% 
  summarise(tubers_avg=mean(tubers),
            tubers_med=median(tubers),
            tubers_var=var(tubers),
            tubers_sd=sd(tubers),
            tubers_std=std(tubers),
            tubers_min=min(tubers),
            tubers_max=max(tubers),
            tubers_q25=quantile(tubers, 0.25),
            tubers_q75=quantile(tubers, 0.75))
```

## Anwendungsbeispiele

Eine erste einfache Beschreibung der Daten kann mit der Funktion `summary()` erfolgen. Hier sieht man jetzt den Unterschied im Output zwischen variety (als *character*) und variety.f (als *factor*).

```{r}
summary(pot)
```

Möchte man eine beschreibende Statistik für jede numerische Variable berechnen, kann die Funktion `summarise_if(is.numeric, mean, na.rm = TRUE)` genutzt werden. Im Beispiel berechnen wir den Mittelwert für alle Variablen im `data.frame pot`.

```{r}
pot %>%
  summarise_if(is.numeric, mean, na.rm = TRUE)
```

Häufig möchte man die beschreibende Statistik für ein oder mehrere Gruppierungslevel berechnen. Bspw. das mittleres Gewicht je Sorte. Wir nutzen hierfür die Funktion `group_by()`:

```{r}
pot %>% group_by(variety) %>% 
  summarise(weight_avg=mean(weight, na.rm = TRUE))
```

Bsp.: mittleres Gewicht je Sorte und Methode

```{r}
pot %>% group_by(variety, method) %>% 
  summarise(weight_avg=mean(weight, na.rm = TRUE))
```

Bsp.: Mittelwert und Standardabweichung von Gewicht je Sorte und Methode

```{r}
pot %>% group_by(variety, method) %>% 
  summarise(weight_avg=mean(weight, na.rm = TRUE),
            weight_sd=sd(weight, na.rm = TRUE))
```

Hier ein Code für eine Übersichtstabelle zur Beschreibung der Daten:

```{r}
library(tidyr)
pot %>% summarise(across(where(is.numeric), .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max, 
                          n=length))) %>%
  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))
```

und hier nur für `tubers` und `weight`:

```{r}
pot %>% summarise(across(c("tubers", "weight"), .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max, 
                          n=length))) %>%
  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))
```

bzw. ohne `plant`

```{r}
pot %>% 
  select(!plant)%>% 
  summarise(across(where(is.numeric), .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max, 
                          n=length))) %>%
  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value'))
```

für unterschiedliche Methoden:

```{r}
pot %>%  group_by(method) %>%
  summarise(across(c("tubers", "weight"), .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max, 
                          n=length))) %>%
  pivot_longer(cols = -method,  names_sep='_', names_to=c('variable', '.value')) %>% 
  arrange(variable)%>% 
  relocate(variable)
```
