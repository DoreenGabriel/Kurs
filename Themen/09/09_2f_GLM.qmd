---
title: "Analysis of two-factorial experiments with generalised linear (mixed effect) models"
---

```{r, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, error= TRUE, comment = NA, options(Encoding="UTF-8"))
```


```{r, message=F, warning=F}
library(ggplot2)# plotting
library(dplyr)# data management and summary statistics
library(ggpubr)# plotting
library(openxlsx)# import and export Excel files
library(forcats)# factor repordering
library(DHARMa) # model diagnostics
library(emmeans) # posthoc tests
library(multcomp) # cld
library(multcompView) #cld
library(glmmTMB) # mixed model
library(car) # anova for glmmTMB
library(lme4) # lmer and glmer mixed model
library(lmerTest) # test lmer
library(conflicted)
conflicts_prefer(lmerTest::lmer)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
```


We use the same data file as before. [data_YSM.xlsx](https://github.com/DoreenGabriel/Kurs/blob/main/Themen/08/data_YSM.xlsx){target="_blank"}
But let's assume we have measured the number of `pests` per trap in the experimental plots. 

Import data and convert `geno` and `N` to factors, levels of N should not be in alphabetical order 

```{r}
df<-read.xlsx("data_YSM.xlsx")
str(df)
df <- df %>%
  mutate(across(c(geno, N), ~ as.factor(.x)),
         N=fct_relevel(N, "low", "med", "high"),
         block=as.factor(rep))
str(df)
```

```{r, fig.height=4}
ggplot(df, aes(y=pests, x=geno, col=N)) +
  stat_boxplot(geom ="errorbar", width = 0.6)+
  geom_boxplot(outlier.shape=NA, width = 0.6) +
  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, 
                                            dodge.width=0.6), shape=1, size=1)
```

And we fit a linear model

```{r}
model <- lm(pests ~ geno * N + block, data = df)
summary(model)
```


```{r}
library(DHARMa)
simulationOutput <- simulateResiduals(fittedModel = model, plot = F)
plot(simulationOutput)
```

```{r}
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
```

We observe that variance in residuals increases with increasing nitrogen fertilisation. Hence the assumption on variance homogeneity is not met. 


```{r}
plotResiduals(simulationOutput, form = df$block)
```


```{r}
emmeans(model, ~geno*N)
CIs=cld(emmeans(model, ~N|geno), method="pairwise", adjust="sidak", Letters=letters)
CIs$.group =gsub(" ", "", CIs$.group, fixed = TRUE)
```
Negative confidence interval. But we cannot measure -1 pests per trap. 

```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  stat_boxplot(geom ="errorbar", width = 0.6)+
  geom_boxplot(outlier.shape=NA, width = 0.6) +
  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, 
                                            dodge.width=0.6), shape=1, size=1)+
  geom_point(data=CIs, aes(y=emmean), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CIs, aes(y=emmean, ymin=lower.CL, ymax=upper.CL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CIs, aes(y = 60, label =.group), col=1)+
 scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")
```

Do you think that these confidence interval match the observed data? 


### Sometimes we run into problems with applying linear models to data:

+ no homogeneous variances 
+ no approximate normal distribution of residuals
+ unrealistic predicted values or confidence intervals
    + e.g. negative values in count data (-2 aphids)
    + proportions above 100% (101% mortality)
+ curvature in residuals

Sometimes a transformation of the response helps: 

+ for count data: log(y) or sqrt(y) or log(y+k)
+ for proportions logit(y): log(p/(1-p))

### But using a **generalized linear model (GLM)** might be a better option.

A generalized linear model (GLM) is an extension of the general linear model that allows for the response variable to have a different **distribution** other than the normal distribution. It enables the modeling of various types of data, such as binary, count, and proportion data, by using a **link function** that transforms the **linear combination of predictors** into a suitable scale for the response variable. 

::: callout-important
Please note that also for linear models, the assumption of the approximate normal distribution of the response is not related to your y with treatment effects, but for y at any given mean. And we check this assumption by looking at the residuals (where the treatment effect is removed). 
:::

### Typical distributions for GLMs 

+ Poisson: for count data
+ Negative binomal: for clustered count data (not strictly exponential family but used in the GLM framework)
+ Binomial: for binary or proportion data
+ Gamma: for positive, continuous data


```{r, echo=FALSE}
# Load required libraries
library(ggplot2)
library(gridExtra)

# Define parameters for each distribution
lambda <- 5                    # Mean for Poisson
size_nb <- 5; prob_nb <- 0.5   # Parameters for Negative Binomial
size_bin <- 10; prob_bin <- 0.5 # Parameters for Binomial
shape_gamma <- 2; rate_gamma <- 1 # Parameters for Gamma

# Generate data for each distribution
x_pois <- 0:15
y_pois <- dpois(x_pois, lambda)

x_nb <- 0:15
y_nb <- dnbinom(x_nb, size = size_nb, prob = prob_nb)

x_bin <- 0:10
y_bin <- dbinom(x_bin, size = size_bin, prob = prob_bin)

x_gamma <- seq(0, 10, by = 0.1)
y_gamma <- dgamma(x_gamma, shape = shape_gamma, rate = rate_gamma)

# Create plots for each distribution
plot_pois <- ggplot(data.frame(x_pois, y_pois), aes(x = x_pois, y = y_pois)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Poisson Distribution", x = "x", y = "Probability") +
  theme_minimal()

plot_nb <- ggplot(data.frame(x_nb, y_nb), aes(x = x_nb, y = y_nb)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Negative Binomial Distribution", x = "x", y = "Probability") +
  theme_minimal()

plot_bin <- ggplot(data.frame(x_bin, y_bin), aes(x = x_bin, y = y_bin)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Binomial Distribution", x = "x", y = "Probability") +
  theme_minimal()

plot_gamma <- ggplot(data.frame(x_gamma, y_gamma), aes(x = x_gamma, y = y_gamma)) +
  geom_line(color = "purple", linewidth = 1) +
  labs(title = "Gamma Distribution", x = "x", y = "Density") +
  theme_minimal()

# Arrange plots in a 2x2 grid
grid.arrange(plot_pois, plot_nb, plot_bin, plot_gamma, nrow = 2)
```


The distributions can have different shapes. 

```{r, echo=FALSE}
# Lade benötigte Pakete
library(ggplot2)
library(gridExtra)

# Daten für die Poisson-Verteilung mit verschiedenen Lambda-Werten
x_pois <- 0:15
y_pois1 <- dpois(x_pois, lambda = 2)
y_pois2 <- dpois(x_pois, lambda = 5)
y_pois3 <- dpois(x_pois, lambda = 10)

# Poisson-Verteilung plotten
plot_pois <- ggplot() +
  geom_bar(aes(x = x_pois, y = y_pois1), stat = "identity", fill = "skyblue", alpha = 0.6) +
  geom_bar(aes(x = x_pois, y = y_pois2), stat = "identity", fill = "orange", alpha = 0.6) +
  geom_bar(aes(x = x_pois, y = y_pois3), stat = "identity", fill = "purple", alpha = 0.6) +
  labs(title = "Poisson distribution", x = "x", y = "Probability") +
  theme_minimal()

# Daten für die Negative Binomial-Verteilung mit verschiedenen Parametern
x_nb <- 0:15
y_nb1 <- dnbinom(x_nb, size = 5, prob = 0.5)
y_nb2 <- dnbinom(x_nb, size = 10, prob = 0.5)
y_nb3 <- dnbinom(x_nb, size = 5, prob = 0.7)

# Negative Binomial-Verteilung plotten
plot_nb <- ggplot() +
  geom_bar(aes(x = x_nb, y = y_nb1), stat = "identity", fill = "skyblue", alpha = 0.6) +
  geom_bar(aes(x = x_nb, y = y_nb2), stat = "identity", fill = "orange", alpha = 0.6) +
  geom_bar(aes(x = x_nb, y = y_nb3), stat = "identity", fill = "purple", alpha = 0.6) +
  labs(title = "Negative binomial distribution", x = "x", y = "Probability") +
  theme_minimal()

# Daten für die Binomial-Verteilung mit verschiedenen Parametern
x_bin <- 0:10
y_bin1 <- dbinom(x_bin, size = 10, prob = 0.3)
y_bin2 <- dbinom(x_bin, size = 10, prob = 0.5)
y_bin3 <- dbinom(x_bin, size = 10, prob = 0.7)

# Binomial-Verteilung plotten
plot_bin <- ggplot() +
  geom_bar(aes(x = x_bin, y = y_bin1), stat = "identity", fill = "skyblue", alpha = 0.6) +
  geom_bar(aes(x = x_bin, y = y_bin2), stat = "identity", fill = "orange", alpha = 0.6) +
  geom_bar(aes(x = x_bin, y = y_bin3), stat = "identity", fill = "purple", alpha = 0.6) +
  labs(title = "Binomial distribution", x = "x", y = "Probability") +
  theme_minimal()

# Daten für die Gamma-Verteilung mit verschiedenen Parametern
x_gamma <- seq(0, 10, by = 0.1)
y_gamma1 <- dgamma(x_gamma, shape = 2, rate = 1)
y_gamma2 <- dgamma(x_gamma, shape = 5, rate = 1)
y_gamma3 <- dgamma(x_gamma, shape = 2, rate = 0.5)

# Gamma-Verteilung plotten
plot_gamma <- ggplot() +
  geom_line(aes(x = x_gamma, y = y_gamma1), color = "skyblue", linewidth = 1) +
  geom_line(aes(x = x_gamma, y = y_gamma2), color = "orange", linewidth = 1) +
  geom_line(aes(x = x_gamma, y = y_gamma3), color = "purple", linewidth = 1) +
  labs(title = "Gamma distribution", x = "x", y = "Density") +
  theme_minimal()

# Plots in einem 2x2 Raster anordnen
grid.arrange(plot_pois, plot_nb, plot_bin, plot_gamma, nrow = 2)

```

### Link function
The link function relates the mean of the response variable to the linear predictor. This function is what allows GLMs to accommodate non-normal data. Common link functions include the log function for count data (Poisson GLM, negative binomial) and strictly positive data (Gamma GLM) and the logit, probit and cloglog function for binary or proportion data (binomial GLM) and the inverse link for Gamma GLM.  


```{r, echo=FALSE}
# Define a range of eta values
eta <- seq(-4, 4, by = 0.1)

# Calculate the link transformations
mu_identity <- eta                         # Identity link
mu_log <- exp(eta)                         # Log link
mu_logit <- 1 / (1 + exp(-eta))            # Logit link
mu_probit <- pnorm(eta)                    # Probit link
mu_cloglog <- 1 - exp(-exp(eta))           # Cloglog link
mu_inverse_pos <- 1 / eta[eta > 0]         # Inverse link for positive eta values
mu_inverse_neg <- 1 / eta[eta < 0]         # Inverse link for negative eta values

# Create data frames for plotting
df_identity <- data.frame(eta, mu = mu_identity)
df_log <- data.frame(eta, mu = mu_log)
df_logit <- data.frame(eta, mu = mu_logit)
df_probit <- data.frame(eta, mu = mu_probit)
df_cloglog <- data.frame(eta, mu = mu_cloglog)
df_inverse_pos <- data.frame(eta = eta[eta > 0], mu = mu_inverse_pos)
df_inverse_neg <- data.frame(eta = eta[eta < 0], mu = mu_inverse_neg)

# Plot for each link function
plot_identity <- ggplot(df_identity, aes(x = eta, y = mu)) +
  geom_line(color = "black") +
  labs(title = "Identity link", x = "eta (link scale)", y = "mu (response scale)") +
  theme_minimal()

plot_log <- ggplot(df_log, aes(x = eta, y = mu)) +
  geom_line(color = "blue") +
  labs(title = "Log link", x = "eta (link scale)", y = "mu (response scale)") +
  theme_minimal()

plot_logit <- ggplot() +
  geom_line(data=df_logit, aes(x = eta, y = mu), color = "red") +
  geom_line(data=df_probit, aes(x = eta, y = mu), color = "green") +
  geom_line(data=df_cloglog, aes(x = eta, y = mu), color = "purple") +
  labs(title = "Logit, probit, cloglog link", x = "eta (link scale)", y = "mu (response scale)") +
  theme_minimal()


plot_inverse <- ggplot() +
  geom_line(data = df_inverse_pos, aes(x = eta, y = mu), color = "orange") +
  geom_line(data = df_inverse_neg, aes(x = eta, y = mu), color = "orange") +
  labs(title = "Inverse link", x = "eta (link scale)", y = "mu (response scale)") +
  theme_minimal()

# Arrange the plots in a grid
grid.arrange(plot_identity, plot_log, plot_logit, plot_inverse, nrow = 2)
```


## Generalized linear model for count data

We use the function `glm` and specify the distribution with the family-argument `poisson` for count data. By default poisson GLMs use the log link. 

```{r}
model2=glm(pests ~ geno * N + block, data = df, family="poisson")
summary(model2)
Anova(model2)
drop1(model2, test="Chi")
```

In Poisson GLMs we need to look at the dispersion and assess whether the model assumptions are valid. Since the Poisson distribution is defined by a single parameter lamda which represents both the mean and the variance, we expect the ratio of the mean and the variance to be 1.  As a quick check you  can devide the residual deviance by the degrees of freedom from the model summary above or use the function `testDispersion()` from the `library(DHARMa)`. 

Hence overdispersion indicated that observed variance is greater than the mean and this can lead to underestimated standard errors, too narrow confidence intervals and invalid p-values. 

Overdispersion can occur if 

+ the model misses important explanatory variables or 
+ due to presence of outliers, non-linear pattern or zero-inflation. 

Possible solutions are extending the model by important explanatory variables (however do not overfit), applying quasipoisson or negative binomial GLMs, or fitting a zero-inflation term (in `glmmmTM`). 


```{r}
simulationOutput <- simulateResiduals(fittedModel = model2, plot = F)
testDispersion(simulationOutput)
plot(simulationOutput)
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
plotResiduals(simulationOutput, form = df$block)
```

When calculating the estimated marginal means we now can differentiate between the link scale (at which data were modeled) and the response scale, which is the back-transformed original scale.  

```{r}
emmeans(model2, ~N*geno)
```

For a Poisson model, this means exponentiating the log-transformed values, so the estimated marginal means are presented as predicted counts rather than log counts. We do this by using the argument `type="response"`.

```{r}
emmeans(model2, ~N*geno, type="response")
```
We can also interpret the ratios of counts in the Poisson GLM. A ratio greater than 1 indicates that the count for one level of N is higher than the count for the other level. 

```{r}
contrast(emmeans(model2, ~N|geno, type="response"), method="trt.vs.ctrl", infer=c(T,T))
```


```{r}
CI2s=cld(emmeans(model2, ~N|geno, type="response"), method="pairwise", adjust="sidak", Letters=letters)
CI2s$.group =gsub(" ", "", CI2s$.group, fixed = TRUE)
CI2s
```

```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  stat_boxplot(geom ="errorbar", width = 0.6)+
  geom_boxplot(outlier.shape=NA, width = 0.6) +
  geom_jitter(position=position_jitterdodge(jitter.width = 0.1, jitter.height = 0, 
                                            dodge.width=0.6), shape=1, size=1)+
  geom_point(data=CI2s, aes(y=rate), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CI2s, aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CI2s, aes(y = 60, label =.group), col=1)+
 scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")
```

The confidence intervals reflect nicely the data, in particular the wider spread with increasing mean. 

```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
   geom_point(data=CI2s, aes(y=rate), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CI2s, aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CI2s, aes(y = 60, label =.group), col=1)+
 scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")
```
```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
   geom_point(data=CI2s, aes(y=rate), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CI2s, aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CI2s, aes(y = 60, label =.group), col=1)+
  scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")+
  scale_y_sqrt(breaks=c(0,3,10,20,40,60))
```

I prefer to scale the y-axis using square root or logarithmic intervals to better reflect the analysis (e.g., a GLM with a log link). This approach highlights differences in the lower range of values, making smaller effects more visible, while preventing higher values from dominating the presentation.


## Generalized linear mixed effect model with block as random effect (glmmTMB)
```{r}
library(glmmTMB)
library(car)
model3 <- glmmTMB(pests ~ geno * N + (1|block), data = df, REML=T, family="poisson")
summary(model3)
drop1(model3, test="Chisq")
Anova(model3)
```

```{r}
CI3s=cld(emmeans(model3, ~N|geno, type="response"), method="pairwise", adjust="sidak", Letters=letters)
CI3s$.group =gsub(" ", "", CI3s$.group, fixed = TRUE)
CI3s
```


```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
   geom_point(data=CI3s, aes(y=rate), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CI3s, aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CI3s, aes(y = 60, label =.group), col=1)+
  scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")+
  scale_y_sqrt(breaks=c(0,3,10,20,40,60))
```



## Generalized linear mixed effect model with block as random effect (lme4)



```{r}
model4 <- glmer(pests ~ geno * N + (1|block), data = df, family="poisson")
summary(model4)
Anova(model4)
drop1(model4, test="Chisq")
```



```{r}
CI4s=cld(emmeans(model4, ~N|geno, type="response"), method="pairwise", adjust="sidak", Letters=letters)
CI4s$.group =gsub(" ", "", CI4s$.group, fixed = TRUE)
CI4s
```


```{r, fig.height=4}
ggplot(df, aes(y=pests, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
   geom_point(data=CI4s, aes(y=rate), 
             shape=16,  size=2, 
             position = position_nudge(x = 0.4))+
  geom_errorbar(data=CI4s, aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.2, position = position_nudge(x = 0.4))+
  geom_text(data=CI4s, aes(y = 60, label =.group), col=1)+
  scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")+
  scale_y_sqrt(breaks=c(0,3,10,20,40,60))
```


### Comparison of all 4 models
```{r}
colnames(CIs)[1:8]<-colnames(CI2s)
CI.comp=rbind(CIs, CI2s, CI3s, CI4s)
CI.comp$model=factor(rep(c("lm", "glm", "glmmTMB",  "glmer"), each=12), levels = c("lm", "glm", "glmmTMB",  "glmer"))

```



```{r, fig.height=4}
ggplot(data=CI.comp, aes(y=rate, x=N, col=model, group=model))+
  geom_point(position=position_dodge(width=0.4))+
  geom_errorbar(aes(y=rate, ymin=asymp.LCL, ymax=asymp.UCL), 
                width=0.4, 
                position=position_dodge(width=0.4))+
  facet_grid(~geno)+
  theme(legend.position="bottom")
```


Confidence intervals of

+ lm negative 
+ lm constant across fitted values (does not represent natural behavior of count data)
+ glm(m) do not differ much

use mixed effect models

+ many blocks and if you are not interested in block effect 
+ interest in predictions without block effect
+ repeated measurements
+ incomplete block design 


### Excercise

Fit a model to explain `pests.A` and perform model diagnostics.  

::: {.callout-tip collapse="true"}
```{r, fig.height=4}
ggplot(df, aes(y=pests.A, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
    scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")
model.A=glmmTMB(pests.A ~ geno * N + block, data = df, family="poisson")
summary(model.A)
simulationOutput <- simulateResiduals(fittedModel = model.A, plot = F)
testDispersion(simulationOutput)
plot(simulationOutput)
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
plotResiduals(simulationOutput, form = df$block)
```


```{r}
model.A=glmmTMB(pests.A ~ geno * N + block, data = df, family="nbinom2")
summary(model.A)
simulationOutput <- simulateResiduals(fittedModel = model.A, plot = F)
testDispersion(simulationOutput)
plot(simulationOutput)
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
plotResiduals(simulationOutput, form = df$block)
```
:::

Fit a model to explain `pests.B` and perform model diagnostics.  

::: {.callout-tip collapse="true"}
```{r, fig.height=4}
ggplot(df, aes(y=pests.B, x=N, col=N)) +
  geom_point(shape=1, size=1.5)+
    scale_color_manual(values=c(rgb(240,215,35, max = 255), 
                             rgb(190,210,35, max = 255), 
                              rgb(35,80,150, max = 255)                              ),
                     limits = c("low","med", "high"))+
  facet_grid(~geno, scales="free", labeller = labeller(geno=label_both))+
  theme_bw() +
  theme(legend.position = "none")+
  ylab("Number of pests per trap and 48h")+
  xlab("Nitrogen fertilisation")
```

```{r}
model.B=glmmTMB(pests.B ~ geno * N + block, data = df, family="nbinom2")
summary(model.B)
simulationOutput <- simulateResiduals(fittedModel = model.B, plot = F)
testDispersion(simulationOutput)
plot(simulationOutput)
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
plotResiduals(simulationOutput, form = df$block)
```

```{r}
model.B1=glmmTMB(pests.B ~ geno * N + block, 
                 dispformula=~geno, data = df, family="nbinom2")
summary(model.B1)
simulationOutput <- simulateResiduals(fittedModel = model.B1, plot = F)
testDispersion(simulationOutput)
plot(simulationOutput)
plotResiduals(simulationOutput, form = df$geno)
plotResiduals(simulationOutput, form = df$N)
plotResiduals(simulationOutput, form = df$block)
```
Compare models by AICc. The lower the better. 

```{r, message=FALSE}
library(bbmle)
AICctab(model.B, model.B1, base=T)
```


:::